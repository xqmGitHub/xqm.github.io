<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2018-01-31 01:33"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>点点</title>
	<link>https://xqmblog.wordpress.com</link>
	<description>点点滴滴</description>
	<pubDate>Wed, 31 Jan 2018 01:33:27 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://xqmblog.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>115236430</wp:author_id><wp:author_login><![CDATA[xqmblog]]></wp:author_login><wp:author_email><![CDATA[xqmmai@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[xqmblog]]></wp:author_display_name><wp:author_first_name><![CDATA[点]]></wp:author_first_name><wp:author_last_name><![CDATA[点]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.com/</generator>

<image>
	<url>https://xqmblog.files.wordpress.com/2017/03/de1.gif?w=32</url>
	<title>点点</title>
	<link>https://xqmblog.wordpress.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	
	<item>
		<title>php自动创建目录并保存文件函数</title>
		<link>https://xqmblog.wordpress.com/2017/01/06/php%e8%87%aa%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%9b%ae%e5%bd%95%e5%b9%b6%e4%bf%9d%e5%ad%98%e6%96%87%e4%bb%b6%e5%87%bd%e6%95%b0/</link>
		<pubDate>Fri, 06 Jan 2017 10:47:49 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[在做文件上传时有一个非常必须要做的功能就是上传文件会按日期生成目录并把文件保存在目录下了，下面我来为各位介绍一段php自动创建目录并保存文件函数

php保存文件，还可以根据文件路径自动连续创建目录，代码如下（注：PHP要版本5以上）：
<!--?php /** * 保存文件 * * @param string $fileName 文件名（含相对路径） * @param string $text 文件内容 * @return boolean */ function saveFile($fileName, $text) { if (!$fileName || !$text) return false; if (makeDir(dirname($fileName))) { if ($fp = fopen($fileName, "w")) { if (@fwrite($fp, $text)) { fclose($fp); return true; } else { fclose($fp); return false; } } } return false; } /** * 连续创建目录 * * @param string $dir 目录字符串 * @param int $mode 权限数字 * @return boolean */ function makeDir($dir, $mode=0755) { /*function makeDir($dir, $mode="0777") { 此外0777不能加单引号和双引号， 加了以后，"0400" = 600权限，处以为会这样，我也想不通*/ if (!dir) return false; if(!file_exists($dir)) { return mkdir($dir,$mode,true); } else { return true; } } ?-->
//以下是测试内容,并调用上面的函数
<!--?php $content = '这里是测试内容'; if(saveFile('dir/test.txt',$content)){ echo '写入成功'; }else{ echo '写入失败'; } ?-->
注意：makeDir就是一个目录创建函数，我们使用的是递归创建了．

来源:转载]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2017-01-06 18:47:49</wp:post_date>
		<wp:post_date_gmt>2017-01-06 10:47:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php%e8%87%aa%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%9b%ae%e5%bd%95%e5%b9%b6%e4%bf%9d%e5%ad%98%e6%96%87%e4%bb%b6%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[464127475]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP 判断是否包含某字符串</title>
		<link>https://xqmblog.wordpress.com/2017/01/08/php-%e5%88%a4%e6%96%ad%e6%98%af%e5%90%a6%e5%8c%85%e5%90%ab%e6%9f%90%e5%ad%97%e7%ac%a6%e4%b8%b2/</link>
		<pubDate>Sun, 08 Jan 2017 12:16:29 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[PHP判断字符串的包含,可以使用PHP的内置函数 strstr,strpos,stristr直接进行判断.也可以通过explode函数的作用写一个判断函数

<strong>1、strstr 和 stristr的用法 </strong>

strstr: 返回一个从被判断字符开始到结束的字符串,如果没有返回值,则不包含. stristr: 它和strstr的使用方法完全一样.唯一的区别是stristr不区分大小写.
<code>$email = ‘ user@example.com’;</code>
<code> $domain = strstr($email, ‘@’);</code>
<code> echo $domain;</code>
<code> // prints @example.com</code>

<strong>2、 strpos的用法</strong>

strpos: 返回boolean值.FALSE和TRUE不用多说.用 “===”进行判断.strpos在执行速度上都比以上两个函数快,另外strpos有一个参数指定判断的位置,但是默认为空.意思是判断整个字符串.缺点是对中文的支持不好.
PHP判断字符串的包含代码如下:
<code>$str= ‘abc’;</code>
<code> $needle= ‘a’;</code>
<code> $pos = strpos($str, $needle);</code>

<strong>3、explode 的用法</strong>
<pre><code>function checkstr($str)</code>
<code>{</code>
<code> $needle = 'a';//判断是否包含a这个字符</code>
<code> $tmparray = explode($needle, $str);</code>
<code> if (count($tmparray) &gt; 1) {</code>
<code> return 'ok';</code>
<code> } else {</code>
<code> return 'no';</code>
<code> }</code>
<code>}</code></pre>
<strong>4、in_array — 检查数组中是否存在某个值例子</strong>

(1). in_array() 例子
<!--?php$os= array("Mac", "NT", "Irix", "Linux");if (in_array("Irix", $os)) {echo "Got Irix";} if ( in_array("mac", $os)) {echo"Got mac";} ?-->
第二个条件失败，因为 in_array() 是区分大小写的，所以以上程序显示为：Got Irix

(2). in_array() 严格类型检查例子
<!--?php$a= array('1.10', 12.4, 1.13);if (in_array('12.4', $a, true)) {echo"'12.4' found with strict check\n";} if ( in_array(1.13, $a, true)) {echo"1.13 found with strict check\n";} ?-->
上例将输出：
1.13 found with strict check

(3). in_array() 中用数组作为 needle
<!--?php$a = array(array('p', 'h'), array('p', 'r'), 'o');if ( in_array(array('p', 'h'), $a)) {echo "'ph' was found\n";} if ( in_array(array('f', 'i'), $a)) {echo "'fi' was found\n";} if ( in_array('o', $a)) {echo "'o' was found\n";} ?-->

上例将输出：
'ph' was found
'o' was found

array_search — 在数组中搜索给定的值，如果成功则返回相应的键名]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2017-01-08 20:16:29</wp:post_date>
		<wp:post_date_gmt>2017-01-08 12:16:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-%e5%88%a4%e6%96%ad%e6%98%af%e5%90%a6%e5%8c%85%e5%90%ab%e6%9f%90%e5%ad%97%e7%ac%a6%e4%b8%b2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[531107237]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP sprintf() 函数</title>
		<link>https://xqmblog.wordpress.com/2017/01/08/php_sprintf/</link>
		<pubDate>Sun, 08 Jan 2017 14:46:26 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[把百分号（%）符号替换成一个作为参数进行传递的变量：

$number = 2;
$str = "Shanghai";
$txt = sprintf("There are %u million cars in %s.",$number,$str);
echo $txt;

输出：There are 2 million cars in Shanghai.

&nbsp;

定义和用法
sprintf() 函数把格式化的字符串写入变量中。
arg1、arg2、++ 参数将被插入到主字符串中的百分号（%）符号处。该函数是逐步执行的。在第一个 % 符号处，插入 arg1，在第二个 % 符号处，插入 arg2，依此类推。
注释：如果 % 符号多于 arg 参数，则您必须使用占位符。占位符位于 % 符号之后，由数字和 "\$" 组成。

%% - 返回一个百分号 %
%b - 二进制数
%c - ASCII 值对应的字符
%d - 包含正负号的十进制数（负数、0、正数）
%e - 使用小写的科学计数法（例如 1.2e+2）
%E - 使用大写的科学计数法（例如 1.2E+2）
%u - 不包含正负号的十进制数（大于等于 0）
%f - 浮点数（本地设置）
%F - 浮点数（非本地设置）
%g - 较短的 %e 和 %f
%G - 较短的 %E 和 %f
%o - 八进制数
%s - 字符串
%x - 十六进制数（小写字母）
%X - 十六进制数（大写字母）
附加的格式值。必需放置在 % 和字母之间（例如 %.2f）：
+ （在数字前面加上 + 或 - 来定义数字的正负性。默认情况下，只有负数才做标记，正数不做标记）
' （规定使用什么作为填充，默认是空格。它必须与宽度指定器一起使用。例如：%'x20s（使用 "x" 作为填充））
- （左调整变量值）
[0-9] （规定变量值的最小宽度）
.[0-9] （规定小数位数或最大字符串长度）
注释：如果使用多个上述的格式值，它们必须按照以上顺序使用。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2017-01-08 22:46:26</wp:post_date>
		<wp:post_date_gmt>2017-01-08 14:46:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php_sprintf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[534537636]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[php-sprintf-%e5%87%bd%e6%95%b0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL字符串函数substring：字符串截取</title>
		<link>https://xqmblog.wordpress.com/2017/01/10/mysql%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%87%bd%e6%95%b0substring%ef%bc%9a%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%88%aa%e5%8f%96/</link>
		<pubDate>Tue, 10 Jan 2017 08:15:04 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><strong>MySQL 字符串截取函数：left(), right(), substring(), substring_index()。还有 mid(), substr()。其中，mid(), substr() 等价于 substring() 函数，substring() 的功能非常强大和灵活。</strong></h4>
<strong>1. 字符串截取：left(str, length)</strong>

mysql&gt; select left('example.com', 3);
+-------------------------+
| left('example.com', 3) |
+-------------------------+
| exa |
+-------------------------+
<strong>2. 字符串截取：right(str, length)</strong>

mysql&gt; select right('example.com', 3);
+--------------------------+
| right('example.com', 3) |
+--------------------------+
| com |
+--------------------------+

实例：

#查询某个字段后两位字符
select right(last3, 2) as last2 from historydata limit 10;
#从应该字段取后两位字符更新到另外一个字段
update `historydata` set `last2`=right(last3, 2);
<strong>3. 字符串截取：substring(str, pos); substring(str, pos, len)</strong>

3.1 从字符串的第 4 个字符位置开始取，直到结束。

mysql&gt; select substring('example.com', 4);
+------------------------------+
| substring('example.com', 4) |
+------------------------------+
| ple.com |
+------------------------------+
3.2 从字符串的第 4 个字符位置开始取，只取 2 个字符。

mysql&gt; select substring('example.com', 4, 2);
+---------------------------------+
| substring('example.com', 4, 2) |
+---------------------------------+
| pl |
+---------------------------------+
3.3 从字符串的第 4 个字符位置（倒数）开始取，直到结束。

mysql&gt; select substring('example.com', -4);
+-------------------------------+
| substring('example.com', -4) |
+-------------------------------+
| .com |
+-------------------------------+
3.4 从字符串的第 4 个字符位置（倒数）开始取，只取 2 个字符。

mysql&gt; select substring('example.com', -4, 2);
+----------------------------------+
| substring('example.com', -4, 2) |
+----------------------------------+
| .c |
+----------------------------------+
我们注意到在函数 substring(str,pos, len)中， pos 可以是负值，但 len 不能取负值。

<strong>4. 字符串截取：substring_index(str,delim,count)</strong>

4.1 截取第二个 '.' 之前的所有字符。

mysql&gt; select substring_index('www.example.com', '.', 2);
+------------------------------------------------+
| substring_index('www.example.com', '.', 2) |
+------------------------------------------------+
| www |
+------------------------------------------------+
4.2 截取第二个 '.' （倒数）之后的所有字符。

mysql&gt; select substring_index('www.example.com', '.', -2);
+-------------------------------------------------+
| substring_index('www.example.com', '.', -2) |
+-------------------------------------------------+
| com.cn |
+-------------------------------------------------+
4.3 如果在字符串中找不到 delim 参数指定的值，就返回整个字符串

mysql&gt; select substring_index('www.example.com', '.coc', 1);
+---------------------------------------------------+
| substring_index('www.example.com', '.coc', 1) |
+---------------------------------------------------+
| www.example.com |
+---------------------------------------------------+

&nbsp;

来源：转载]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2017-01-10 16:15:04</wp:post_date>
		<wp:post_date_gmt>2017-01-10 08:15:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%87%bd%e6%95%b0substring%ef%bc%9a%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%88%aa%e5%8f%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySql]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[595593357]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Github上PHP资源汇总大全，php学习的好资料</title>
		<link>https://xqmblog.wordpress.com/2017/01/10/github%e4%b8%8aphp%e8%b5%84%e6%ba%90%e6%b1%87%e6%80%bb%e5%a4%a7%e5%85%a8%ef%bc%8cphp%e5%ad%a6%e4%b9%a0%e7%9a%84%e5%a5%bd%e8%b5%84%e6%96%99/</link>
		<pubDate>Tue, 10 Jan 2017 08:29:27 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Github上PHP资源汇总大全，php学习的好资料</strong>

<strong>国外程序员ziadoz 在Github上收集整理了PHP的各种资源，内容包括模板、框架、数据库、安全等方面的库和工具。汇总了各种PHP资源，供各位PHP学习者和程序员参考。</strong>
<strong>英文原文：https://github.com/ziadoz/awesome-php</strong>
<table class="text-content">
<tbody>
<tr class="firstRow">
<td valign="top" width="487">
<h2>依赖管理</h2>
——用于依赖管理的包和框架
<a href="http://getcomposer.org/" target="_blank">Composer</a>/<a href="http://packagist.org/" target="_blank">Packagist</a> : 一个包和依赖管理器
<a href="https://github.com/composer/installers" target="_blank">Composer Installers</a>:  一个多框架Composer库安装器
<a href="https://github.com/FriendsOfPHP/pickle" target="_blank">Pickle</a>: 可以在任意平台上安装PHP扩展包
<h2>静态站点生成器</h2>
——生成Web页面内容的预处理工具
<a href="http://sculpin.io/" target="_blank">Sculpin</a>:  将Markdown和Twig转换为静态HTML的工具
<a href="http://phrozn.info/" target="_blank">Phrozn</a>: 另一款将Textile、Markdown和Twig转为HTML的工具
<h2>框架</h2>
——Web开发框架
<a href="http://symfony.com/" target="_blank">Symfony2</a> : 由独立组件构成的框架
<a href="http://framework.zend.com/" target="_blank">Zend Framework 2</a>: 同样是由独立组件构成的框架
<a href="http://laravel.com/" target="_blank">Laravel 4</a>: 简洁优雅的PHP Web开发框架
<a href="http://auraphp.com/" target="_blank">Aura PHP</a>:  独立组件的框架
<a href="https://github.com/yiisoft/yii2/" target="_blank">Yii2</a> : 用于开发大型Web应用的高性能PHP框架
<a href="http://nette.org/" target="_blank">Nette</a>:  同样是由独立组件构成的框架
<a href="http://www.ppi.io/" target="_blank">PPI Framework 2</a>: 一个交互性的框架
<a href="http://phalconphp.com/en/" target="_blank">Phalcon</a>: 一个作为C扩展的框架
<h2>微型框架</h2>
——微型框架和路由
<a href="http://silex.sensiolabs.org/" target="_blank">Silex</a>: 基于Symphony2组件的微型框架
<a href="http://www.slimframework.com/" target="_blank">Slim</a>:  另一个简单的微型框架
<a href="http://bulletphp.com/" target="_blank">Bullet PHP</a>:  用于构建REST APIs的微型框架
<a href="https://github.com/nikic/FastRoute" target="_blank">Fast Route</a>:  快速路由选择库
<a href="https://github.com/c9s/Pux" target="_blank">Pux</a>: 另一个快速路由选择库
<h2>模板</h2>
——模板和词法分析的库与工具
<a href="http://twig.sensiolabs.org/" target="_blank">Twig</a>: 一种综合的模板语言
<a href="https://github.com/asm89/twig-cache-extension" target="_blank">Twig Cache Extension</a>: 用于Twig的模板片段缓存库
<a href="https://github.com/bobthecow/mustache.php" target="_blank">Mustache</a>: PHP实现的Mustache模板语言
<a href="https://github.com/weierophinney/phly_mustache" target="_blank">Phly Mustache</a>: 另一个PHP实现的Mustache模板语言
<a href="https://github.com/arnaud-lb/MtHaml" target="_blank">MtHaml</a> : PHP实现的HAML模板语言
<a href="http://phptal.org/" target="_blank">PHPTAL</a>: PHP实现的TAL模板语言
<a href="http://platesphp.com/" target="_blank">Plates</a>: 一个原始的PHP模板库
<a href="https://github.com/pyrocms/lex" target="_blank">Lex</a>: 一个轻量级模板解析器
<h2>持续集成</h2>
——持续集成的库和应用
<a href="https://travis-ci.org/" target="_blank">Travis CI</a>: 一个持续集成的平台
<a href="http://www.phptesting.org/" target="_blank">PHPCI</a>: 一个PHP的开源持续集成平台
<a href="http://sismo.sensiolabs.org/" target="_blank">Sismo</a>: 一个持续的测试服务器库
<a href="http://jenkins-ci.org/" target="_blank">Jenkins</a>: PHP支持的持续集成平台
<a href="https://github.com/jolicode/JoliCi" target="_blank">JoliCi</a>: PHP开发的由Docker支持的持续集成客户端
<h2>文件</h2>
——关于文件处理和MIME类型检查
<a href="https://github.com/KnpLabs/Gaufrette" target="_blank">Gaufrette</a>:  一个文件流的抽象层
<a href="https://github.com/FrenkyNet/Flysystem" target="_blank">Flysystem</a>:  另一个文件流的抽象层
<a href="https://github.com/dflydev/dflydev-canal" target="_blank">Canal</a>: 一个检查互联网媒体类型的库
<a href="https://github.com/dflydev/dflydev-apache-mime-types" target="_blank">Apache MIME Types</a>: 一个解析Apache MIME类型的库
<a href="https://github.com/versionable/Ferret" target="_blank">Ferret</a>:  一个MIME检测库
<a href="https://github.com/hoaproject/Mime" target="_blank">Hoa Mime</a>: 另一个MIME检测库
<a href="https://github.com/henrikbjorn/Lurker" target="_blank">Lurker</a>: 一个资源跟踪库
<a href="https://github.com/herrera-io/php-file-locator" target="_blank">PHP File Locator</a>: 一个在大型项目中定位文件的库
<a href="https://github.com/alchemy-fr/PHP-FFmpeg/" target="_blank">PHP FFmpeg</a>:  一个用于FFmpeg视频包装的库
<a href="https://github.com/nyamsprod/Bakame.csv" target="_blank">CSV</a>: 一个CSV数据操作库
<h2></h2>
<h2>测试</h2>
——测试代码库和生成测试数据的库
<a href="https://github.com/sebastianbergmann/phpunit" target="_blank">PHPUnit</a>: 一个单元测试框架
<a href="https://github.com/sebastianbergmann/dbunit" target="_blank">DBUnit</a>:  PHPUnit的代码测试库
<a href="https://github.com/brianium/paratest" target="_blank">ParaTest</a>: PHPUnit的并行测试库
<a href="https://github.com/phpspec/phpspec" target="_blank">PHPSpec</a>: 根据规范的单元测试库
<a href="https://github.com/Codeception/Codeception" target="_blank">Codeception</a>: 一个全栈测试框架
<a href="https://github.com/Codeception/AspectMock" target="_blank">AspectMock</a>: PHPUnit/Codeception的模拟框架
<a href="https://github.com/atoum/atoum" target="_blank">Atoum</a>: 一个简单的测试库
<a href="https://github.com/padraic/mockery" target="_blank">Mockery</a>: 一个用于测试的模拟对象库
<a href="https://github.com/mlively/Phake" target="_blank">Phake</a>: 另一个用于测试的模拟对象库
<a href="https://github.com/phpspec/prophecy" target="_blank">Prophecy</a>: 一个强大的模拟框架
<a href="https://github.com/fzaninotto/Faker" target="_blank">Faker</a>: 一个伪数据生成库
<a href="https://github.com/mauris/samsui" target="_blank">Samsui</a>: 另一个伪数据生成库
<a href="https://github.com/nelmio/alice" target="_blank">Alice</a>: 用于生成复杂数据的库
<a href="http://behat.org/" target="_blank">Behat</a>: 一个行为驱动开发（BDD）的测试框架
<a href="https://github.com/danielstjules/pho" target="_blank">Pho</a>: 另一个行为驱动开发的测试框架
<a href="http://mink.behat.org/" target="_blank">Mink</a>: Web验收测试
<a href="https://github.com/InterNations/http-mock" target="_blank">HTTP Mock</a>: 一个在单元测试中模拟HTTP请求的库
<a href="https://github.com/mikey179/vfsStream" target="_blank">VFS Stream</a>: 一个用于测试的虚拟文件系统流包装
<a href="https://github.com/adlawson/vfs.php" target="_blank">VFS</a>: 另一个用于测试的虚拟文件系统
<a href="http://locust.io/" target="_blank">Locust</a>: 一个Python开发的现代负载测试库
<h2>密码</h2>
——处理和存储密码的库和工具
<a href="https://github.com/ircmaxell/password_compat" target="_blank">Password Compat</a>: 一个用于新的PHP5.5密码功能的兼容库
<a href="http://www.openwall.com/phpass/" target="_blank">phpass</a>: 一个便携式密码哈希框架
<a href="https://github.com/ircmaxell/PHP-PasswordLib" target="_blank">PHP Password Lib</a>: 一个用于生成和验证密码的库
<a href="https://github.com/ircmaxell/password-policy" target="_blank">Password Policy</a>: 一个PHP和JavaScript的密码规则库
<a href="https://github.com/jeremykendall/password-validator" target="_blank">Password Validator</a>: 验证和升级密码哈希的库
<a href="https://github.com/bjeavons/zxcvbn-php" target="_blank">Zxcvbn PHP</a>: 一个基于Zxcvbn JS的PHP显示密码强度估计库
<h2>代码分析</h2>
——用于分析、解析和操作代码库的工具
<a href="https://github.com/nikic/PHP-Parser" target="_blank">PHP Parser</a>: 一个PHP编写的PHP解析器
<a href="https://github.com/ircmaxell/PHPPHP" target="_blank">PHPPHP</a>: 一个PHP实现的PHP虚拟机
<a href="https://github.com/fieryprophet/php-sandbox" target="_blank">PHPSandbox</a>: PHP的沙盒环境
<a href="https://github.com/jakubledl/dissect" target="_blank">Dissect</a>: 词法和语法分析的工具集合
<a href="http://phpmd.org/" target="_blank">PHP Mess Detector</a>: 一个扫描代码bug、次佳代码和未使用参数的库
<a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank">PHP Code Sniffer</a>: 一个检测PHP、CSS和JS代码标准冲突的库
<a href="https://github.com/sebastianbergmann/phpcpd" target="_blank">PHPCPD</a>: 一个检测复制和粘贴代码的库
<a href="https://github.com/scrutinizer-ci/php-analyzer" target="_blank">PHP Analyser</a>: 一个分析PHP代码中错误的库
<a href="https://github.com/fabpot/PHP-CS-Fixer" target="_blank">PHP CS Fixer</a>: 一个代码标准库
<a href="https://github.com/schmittjoh/php-manipulator" target="_blank">PHP Manipulator</a>: 用于分析和修改PHP源代码的库
<a href="https://github.com/Halleck45/PhpMetrics" target="_blank">PHP Metrics</a>: 一个静态测量库
<a href="https://github.com/QafooLabs/php-refactoring-browser" target="_blank">PHP Refactoring Browser</a>: 一个用于重构PHP代码的命令行工具
<a href="https://github.com/devster/ubench" target="_blank">UBench</a>: 一个简单的小型基准测试库
<a href="https://github.com/polyfractal/athletic" target="_blank">Athletic</a>: 一个基于标注的基准测试库
<a href="https://github.com/Trismegiste/Mondrian" target="_blank">Mondrian</a>: 使用图论的代码分析工具
<a href="https://scrutinizer-ci.com/" target="_blank">Scrutinizer</a>: 检查PHP代码的Web工具
<a href="https://github.com/sebastianbergmann/phploc" target="_blank">PHPLOC</a>: 一个快速评估PHP项目大小的工具
<a href="https://github.com/phacility/xhprof" target="_blank">xHprof</a>: 另一个PHP性能评测工具
<a href="https://github.com/jbrooksuk/phpcheckstyle" target="_blank">PHPCheckstyle</a>: 一个帮助遵守特定代码规则的工具
<h2>资源管理</h2>
——用于管理、压缩和最小化网站资源的工具
<a href="https://github.com/kriswallsmith/assetic" target="_blank">Assetic</a>: 一个资源管理的管道库
<a href="https://github.com/CHH/pipe" target="_blank">Pipe</a>: 另一个资源管理的管道库
<a href="https://github.com/meenie/munee" target="_blank">Munee</a>: 一个资源优化库
<a href="https://github.com/tedivm/JShrink" target="_blank">JShrink</a>: 一个JavaScript的最小化库
<a href="https://github.com/webmozart/puli" target="_blank">Puli</a>: 一个检测资源绝对路径的库
<h2>地理定位</h2>
——使用经纬度编码地址的库
<a href="http://geocoder-php.org/" target="_blank">GeoCoder</a>: 一个地理编码库

<a href="https://github.com/php-loep/Geotools" target="_blank">GeoTools</a>: 一个地理工具相关的库

<a href="https://github.com/mjaschen/phpgeo" target="_blank">PHPGeo</a>: 一个简单的地理库
<a href="https://github.com/jmikola/geojson" target="_blank">GeoJSON</a>: 一个GeoJSON的实现
<h2>日期和时间</h2>
——处理日期和时间的库
<a href="https://github.com/briannesbitt/Carbon" target="_blank">Carbon</a>: 一个简单的日期时间API扩展
<a href="https://github.com/jasonlewis/expressive-date" target="_blank">ExpressiveDate</a>: 另一个日期时间API扩展
<a href="http://yohan.giarel.li/CalendR" target="_blank">CalendR</a>: 一个日历管理的库
<h2>事件</h2>
——事件驱动或非阻塞事件循环实现的库
<a href="https://github.com/reactphp/react" target="_blank">React</a>: 一个事件驱动的非阻塞I/O库
<a href="https://github.com/asm89/Rx.PHP" target="_blank">Rx.PHP</a>: 一个反应扩展库
<a href="https://github.com/cboden/Ratchet" target="_blank">Ratchet</a>: 一个Web套接字库
<a href="https://github.com/hoaproject/Websocket" target="_blank">Hoa WebSocket</a>: 另一个Web套接字库
<a href="https://github.com/hoaproject/Eventsource" target="_blank">Hoa EventSource</a>: 一个事件源库
<a href="https://github.com/igorw/evenement" target="_blank">Evenement</a>: 一个事件调度库
<a href="https://github.com/fuelphp/event" target="_blank">FuelPHP Event</a>: 另一个事件调度库
<h2>迁移</h2>
——用于管理数据库模式和迁移的库
<a href="https://github.com/davedevelopment/phpmig" target="_blank">PHPMig</a>: 一个迁移管理库
<a href="https://github.com/robmorgan/phinx" target="_blank">Phinx</a>: 一个数据库迁移管理库
<a href="https://github.com/icomefromthenet/Migrations" target="_blank">Migrations</a>: 另一个迁移管理库
<a href="http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html" target="_blank">Doctrine Migrations</a>: 用于Doctrine的迁移库
<h2>NoSQL</h2>
——处理NoSQL后端的库
<a href="https://github.com/alexbilbie/MongoQB" target="_blank">MongoQB</a>: 一个MongoDB的查询构建库
<a href="https://github.com/thephpleague/monga" target="_blank">Monga</a>: 一个MongoDB的抽象库
<a href="https://github.com/nrk/predis" target="_blank">Predis</a>: 一个功能完全的Redis库
<h2>队列</h2>
——处理事件和任务队列的库
<a href="https://github.com/pda/pheanstalk" target="_blank">Pheanstalk</a>: 一个Beanstalkd客户端库
<a href="https://github.com/videlalvaro/php-amqplib" target="_blank">PHP AMQP</a>: 一个纯PHP AMQP库
<a href="https://github.com/videlalvaro/Thumper" target="_blank">Thumper</a>: 一个RabbitMQ模式库
<a href="https://github.com/bernardphp/bernard" target="_blank">Bernard</a>: 一个多后端的抽象库
<h2>搜索</h2>
——在数据中建立索引和执行查询相关的库和软件
<a href="https://github.com/elasticsearch/elasticsearch-php" target="_blank">ElasticSearch PHP</a>: 用于ElasticSearch的官方客户端库
<a href="https://github.com/ruflin/Elastica" target="_blank">Elastica</a>: 另一个ElasticSearch的客户端库
<a href="http://www.solarium-project.org/" target="_blank">Solarium</a>: Solr的客户端库
<a href="http://foolcode.github.io/SphinxQL-Query-Builder/" target="_blank">SphinxQL query builder</a>: Sphinx搜索引擎的查询库
<h2>命令行</h2>
——构建命令行工具的库
<a href="https://github.com/d11wtq/boris" target="_blank">Boris</a>: 一个微型的PHP REPL
<a href="https://github.com/bobthecow/psysh" target="_blank">PsySH</a>: 另一个PHP REPL
<a href="https://github.com/mcrumm/pecan" target="_blank">Pecan</a>: 一个事件驱动，非阻塞内核
<a href="https://github.com/ulrichsg/getopt-php" target="_blank">GetOpt</a>: 一个命令行选择解析器
<a href="https://github.com/CHH/optparse" target="_blank">OptParse</a>: 另一个命令行选择解析器
<a href="https://github.com/nategood/commando" target="_blank">Commando</a>: 一个简单的命令行选择解析器
<a href="https://github.com/c9s/php-GetOptionKit" target="_blank">GetOptionKit</a>: 同样还是一个命令行选择解析器
<a href="https://github.com/mtdowling/cron-expression" target="_blank">Cron Expression</a>: 计算cron运行日期的库
<a href="https://github.com/MrRio/shellwrap" target="_blank">ShellWrap</a>: 一个简单的命令行包装库
<a href="https://github.com/hoaproject/Console" target="_blank">Hoa Console</a>: 另一个命令行库
<a href="https://github.com/php-loep/shunt" target="_blank">Shunt</a>: 一个在多台远程机器上并行运行的命令行库
<a href="https://github.com/Cilex/Cilex" target="_blank">Cilex</a>: 构建命令行工具的小型框架
<h2>身份验证</h2>
——实现身份验证模式的库
<a href="https://github.com/cartalyst/sentry" target="_blank">Sentry</a>: 一个身份验证和授权的框架
<a href="http://docs.cartalyst.com/sentry-social-2/introduction" target="_blank">Sentry Social</a>: 一个用于社交网络身份验证的库
<a href="https://github.com/opauth/opauth" target="_blank">Opauth</a>: 一个多供应的身份验证框架
<a href="https://github.com/php-loep/oauth2-server" target="_blank">OAuth2</a>: 一个OAuth2身份验证服务器、资源服务器和客户端库
<a href="http://bshaffer.github.io/oauth2-server-php-docs/" target="_blank">OAuth2 Server</a>: 一个OAuth2服务器实现
<a href="https://github.com/Lusitanian/PHPoAuthLib" target="_blank">PHP oAuthLib</a>: 另一个OAuth库
<a href="https://github.com/ruudk/twitteroauth" target="_blank">TwitterOAuth</a>: 同样是一个OAuth库
<a href="https://github.com/lyrixx/twitter-sdk" target="_blank">TwitterSDK</a>: 一个经过完全测试的Twitter SDK
<a href="https://github.com/dflydev/dflydev-hawk" target="_blank">Hawk</a>: 一个Hawk HTTP身份验证库
<a href="https://github.com/hybridauth/hybridauth" target="_blank">HybridAuth</a>: 一个开源的社交登录库
<h2>数据结构和存储</h2>
——实现数据结构和存储技术的库
<a href="https://github.com/morrisonlevi/Ardent" target="_blank">Ardent</a>: 一个数据结构库
<a href="https://github.com/schmittjoh/php-collection" target="_blank">PHP Collections</a>: 一个简单的集合库
<a href="https://github.com/schmittjoh/serializer" target="_blank">Serializer</a>: 用于序列化和反序列化数据的库

<a href="https://github.com/herrera-io/php-object-storage" target="_blank">PHP Object Storage</a>: 一个用于对象存储的库

<a href="https://github.com/php-loep/fractal" target="_blank">Fractal</a>: 一个将复杂数据结构转换为JSON输出的库

<a href="http://github.com/Wisembly/Totem" target="_blank">Totem</a>: 一个管理和创建数据修改集的库

<a href="https://github.com/TimeToogo/Pinq" target="_blank">PINQ</a>: PHP实时Linq库
<a href="https://github.com/netresearch/jsonmapper" target="_blank">JsonMapper</a>: 一个将内嵌JSON结构映射到PHP类上的库
<h2>通知</h2>
——关于通知软件的库
<a href="https://github.com/filp/nod" target="_blank">Nod</a>: 一个通知库
<a href="https://github.com/wrep/notificato" target="_blank">Notificato</a>: 一个处理推送消息的库
<a href="https://github.com/Ph3nol/NotificationPusher" target="_blank">Notification Pusher</a>: 设备推送通知的独立库
<a href="https://github.com/namshi/notificator" target="_blank">Notificator</a>: 一个轻量级通知库
<h2>部署</h2>
——用于项目部署的库
<a href="https://github.com/tamagokun/pomander" target="_blank">Pomander</a>: 一个PHP应用的部署工具
<a href="https://github.com/Anahkiasen/rocketeer" target="_blank">Rocketeer</a>: PHP的快速和简单部署器
<a href="https://github.com/laravel/envoy" target="_blank">Envoy</a>: 使用PHP运行SSH任务的工具
<a href="https://github.com/aerialls/Plum" target="_blank">Plum</a>: 一个部署库
<h2>集成开发环境IDE</h2>
——支持PHP的集成开发环境
<a href="https://netbeans.org/" target="_blank">Netbeans</a>: 支持PHP和HTML5的IDE环境
<a href="https://www.eclipse.org/downloads/" target="_blank">Eclipse for PHP Developers</a> : 基于Eclipse平台的PHP IDE
<a href="http://www.jetbrains.com/phpstorm/" target="_blank">PhpStorm</a> : 商业PHP IDE
<h2>Web应用</h2>
——基于Web的应用和工具
<a href="http://3v4l.org/" target="_blank">3V4L</a>: 一个在线的PHP内核
<a href="http://dbv.vizuina.com/" target="_blank">DBV</a>: 一个数据库版本控制应用
<a href="https://github.com/CoderKungfu/php-queue" target="_blank">PHP Queue</a>: 一个管理队列后端的应用
<a href="http://composer.borreli.com/" target="_blank">Composer as a Service</a>: 作为一个zip文件下载Composer包的工具
<a href="https://github.com/sj26/mailcatcher" target="_blank">MailCatcher</a>: 一个抓取和浏览邮件的Web工具
<h2>开发环境</h2>
<a href="http://www.vagrantup.com/" target="_blank">Vagrant</a>: 一个便携式的开发环境工具
<a href="http://www.ansibleworks.com/" target="_blank">Ansible</a>: 一个非常简单的编制框架
<a href="http://puppetlabs.com/" target="_blank">Puppet</a>: 一个服务器自动化框架和应用
<a href="https://puphpet.com/" target="_blank">PuPHPet</a>: 用于构建PHP开发虚拟机的Web工具
<a href="http://getprotobox.com/" target="_blank">Protobox</a>: 另一个用于构建PHP开发虚拟机的Web工具
<a href="http://phansible.com/" target="_blank">Phansible</a>: 一个用Ansible构建PHP开发开发虚拟机的Web工具

&nbsp;</td>
<td valign="top" width="487">
<h2>依赖管理的附加部分</h2>
——其它依赖管理的相关工具
<a href="https://github.com/composer/satis" target="_blank">Satis</a> : 静态的Composer库生成器
<a href="https://github.com/bamarni/composition" target="_blank">Composition</a>: 一个运行时检查Composer环境的库
<a href="https://github.com/herrera-io/php-version" target="_blank">Version</a> : 一个在语义上分析和比较的库
<a href="https://github.com/ralphschindler/Namespacer" target="_blank">NameSpacer</a> : 将下划线转为命名空间的库
<a href="https://github.com/goatherd/patch-installer" target="_blank">Patch Installer</a>: 使用Composer安装补丁的库
<a href="https://github.com/silpion/composer-checker" target="_blank">Composer Checker</a>: 一个验证Composer配置的工具
<h2>流</h2>
——处理流的库
<a href="https://github.com/fzaninotto/Streamer" target="_blank">Streamer</a>: 一个简单的面向对象流包装库
<h2>框架的附加部分</h2>
——其它关于Web开发框架的相关工具
<a href="https://github.com/symfony-cmf/symfony-cmf" target="_blank">Symfony CMF</a>: 一个创建自定义CMS的内容管理框架
<a href="http://rad.knplabs.com/" target="_blank">Knp RAD Bundle</a>: Symfony2的快速应用程序包（RAD）
<h2>框架组件</h2>
——来自Web开发框架的组件
<a href="http://symfony.com/doc/master/components/index.html" target="_blank">Symfony2 Components</a>: 关于Symphony2的组件
<a href="https://packages.zendframework.com/" target="_blank">Zend Framework 2 Components</a>:  关于ZF2的组件
<a href="http://auraphp.github.com/" target="_blank">Aura Components</a>:  一个PHP5.4的组件包
<a href="http://hoa-project.net/En/" target="_blank">Hoa Project</a>:  另一个PHP组件包
<h2>微型框架的附加部分</h2>
——其它相关的微型框架和路由
<a href="https://github.com/fabpot/Silex-Skeleton" target="_blank">Silex Skeleton</a>: 用于Silex的项目框架
<a href="https://github.com/silexphp/Silex-WebProfiler" target="_blank">Silex Web Profiler</a>:  用于Silex的Web调试工具条
<a href="https://github.com/stackphp" target="_blank">Stack</a>: 用于Silex/Symphony的可堆叠中间件库
<a href="https://github.com/codeguy/Slim-Skeleton" target="_blank">Slim Skeleton</a>: 用于Slim的框架
<a href="https://github.com/codeguy/Slim-Views" target="_blank">Slim View</a>: Slim的自定义视图集
<a href="https://github.com/codeguy/Slim-Middleware" target="_blank">Slim Middleware</a>: Slim的自定义中间件集合
<h2>HTTP</h2>
——用于HTTP和抓取网站的库
<a href="https://github.com/guzzle/guzzle" target="_blank">Guzzle</a>: 一个完整的HTTP客户端
<a href="https://github.com/kriswallsmith/Buzz" target="_blank">Buzz</a>: 另一个HTTP客户端
<a href="https://github.com/rmccue/Requests" target="_blank">Requests</a>: 一个简单的HTTP库
<a href="https://github.com/nategood/httpful" target="_blank">HTTPFul</a>:  一个链式HTTP客户端
<a href="https://github.com/fabpot/Goutte" target="_blank">Goutte</a>: 一个简单的Web抓取器
<a href="http://php-vcr.github.io/" target="_blank">PHP VCR</a>: 一个录制和回放HTTP请求的库
<h2>Email</h2>
——用于发送和解析Email的库
<a href="http://swiftmailer.org/" target="_blank">SwiftMailer</a>: 一个邮件程序的解决方案
<a href="https://github.com/PHPMailer/PHPMailer" target="_blank">PHPMailer</a>: 另一个邮件程序的解决方案
<a href="https://github.com/tedivm/Fetch" target="_blank">Fetch</a>: 一个IMAP库
<a href="https://github.com/willdurand/EmailReplyParser" target="_blank">Email Reply Parser</a>: 一个邮件回复解析器库
<a href="https://github.com/henrikbjorn/Stampie" target="_blank">Stampie</a>: 关于邮件服务的库，比如SendGrid、PostMark、MailGun和Mandrill
<a href="https://github.com/tijsverkoyen/CssToInlineStyles" target="_blank">CssToInlineStyles</a>: 邮件模板中一个内联的CSS库
<h2>依赖注入</h2>
——实现依赖注入设计模式的库
<a href="http://pimple.sensiolabs.org/" target="_blank">Pimple</a>: 一个小的依赖注入容器
<a href="https://github.com/rdlowrey/Auryn" target="_blank">Auryn</a>: 另一个小的依赖注入容器
<a href="https://github.com/orno/di" target="_blank">Orno Di</a>: 一个易扩展的依赖注入容器
<a href="http://mnapoli.github.com/PHP-DI/" target="_blank">PHP DI</a>: 一个使用标注实现的依赖注入
<a href="https://github.com/jeremeamia/acclimate" target="_blank">Acclimate</a>:  依赖注入容器和服务定位器的通用接口
<h2>图像</h2>
——处理图像的库
<a href="http://imagine.readthedocs.org/en/latest/index.html" target="_blank">Imagine</a>: 一个图像处理库
<a href="https://github.com/Sybio/ImageWorkshop" target="_blank">PHP Image Workshop</a>: 另一个图像处理库
<a href="https://github.com/Intervention/image" target="_blank">Intervention Image</a>: 同样还是一个图像处理库
<a href="https://github.com/Sybio/GifFrameExtractor" target="_blank">GIF Frame Extractor</a>: 一个提取GIF动画帧信息的库
<a href="https://github.com/Sybio/GifCreator" target="_blank">GIF Creator</a>:  从多幅图片中创建GIF动画的库
<a href="https://github.com/nmcteam/image-with-text" target="_blank">Image With Text</a>: 在图像中嵌入文本的库
<a href="https://github.com/php-loep/color-extractor" target="_blank">Color Extractor</a>: 从图像中提取颜色的库
<h2>安全性</h2>
——用于生成安全的随机数、加密数据、扫描漏洞的库
<a href="https://github.com/ezyang/htmlpurifier" target="_blank">HTML Purifier</a>: 一个标准的HTML过滤器
<a href="https://github.com/ircmaxell/RandomLib" target="_blank">RandomLib</a>: 生成随机数和随机字符串的库
<a href="https://github.com/pixeloution/true-random" target="_blank">True Random</a>: 使用<a href="http://www.random.org/" target="_blank">www.random.org</a>生成随机数的库
<a href="https://github.com/padraic/SecurityMultiTool" target="_blank">SecurityMultiTool</a>: 一个PHP安全库
<a href="http://phpseclib.sourceforge.net/" target="_blank">PHPSecLib</a>: 一个纯的PHP安全通信库
<a href="https://github.com/timoh6/TCrypto" target="_blank">TCrypto</a>: 一个简单的键值加密存储库
<a href="https://github.com/PHPIDS/PHPIDS" target="_blank">PHP IDS</a>: 一个结构化的PHP安全层
<a href="https://github.com/Herzult/php-ssh" target="_blank">PHP SSH</a>: 面向对象的SSH包装库
<a href="https://github.com/psecio/iniscan" target="_blank">IniScan</a>: 一个扫描PHP INI文件安全的工具
<a href="https://security.sensiolabs.org/" target="_blank">SensioLabs Security Check</a>: 一个根据安全建议检查Composer依赖的Web工具
<a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project" target="_blank">Zed</a>: 用于Web应用的集成渗透测试工具
<h2>文档</h2>
——生成项目文档的库
<a href="https://github.com/fabpot/Sami" target="_blank">Sami</a>: 一个API文档生成器
<a href="https://github.com/apigen/apigen" target="_blank">APIGen</a>: 另一个API文档生成器
<a href="https://github.com/phpDocumentor/phpDocumentor2" target="_blank">PHP Documentor 2</a>: 文档生成器
<a href="http://phpdox.de/" target="_blank">phpDox</a>: 一个PHP项目的文档生成器（不仅仅是API文档）
<h2>调试</h2>
——调试代码的库和工具
<a href="https://github.com/xdebug/xdebug" target="_blank">xDebug</a>: 一个PHP的调试和分析工具
<a href="http://phpdebugbar.com/" target="_blank">PHP Debug Bar</a>: 一个调试工具条
<a href="https://github.com/Seldaek/php-console" target="_blank">PHP Console</a>: Web调试控制台
<a href="https://github.com/barbushin/php-console" target="_blank">Barbushin PHP Console</a>: 一个使用Google Chrome的Web调试控制工具
<a href="http://phpdbg.com/" target="_blank">PHPDBG</a>: 一个交互性的PHP调试器
<a href="https://github.com/nette/tracy" target="_blank">Tracy</a>: 一个简单的错误检测、日志和时间测量库
<h2>构建工具</h2>
——项目构建和自动化工具
<a href="https://github.com/herrera-io/php-go" target="_blank">Go</a>: 一个简单的PHP构建工具
<a href="https://github.com/CHH/bob" target="_blank">Bob</a>: 一个简单的项目自动化工具
<a href="https://github.com/jaz303/phake" target="_blank">Phake</a>: 一个PHP克隆库
<a href="https://github.com/kherge/Box" target="_blank">Box</a>: 用来构建PHAR文件的工具
<a href="http://www.phing.info/" target="_blank">Phing</a>: 依据Apache Ant的PHP项目构建系统
<h2>任务运行器</h2>
——自动运行任务的库
<a href="http://taskphp.github.io/" target="_blank">Task</a>: 依据Grunt和Gulp的纯PHP任务运行器
<a href="https://github.com/Codegyre/Robo" target="_blank">Robo</a>: 面向对象的PHP任务运行器
<a href="http://bldr.io/" target="_blank">Bldr</a>: 构建在Symphony组件上的PHP任务运行器
<h2>导航</h2>
——构建导航结构的工具
<a href="https://github.com/KnpLabs/KnpMenu" target="_blank">KnpMenu</a>: 一个菜单库
<a href="https://github.com/tackk/cartographer" target="_blank">Cartographer</a>: 一个站点地图生成库
<h2>日志</h2>
——用于生成和处理日志文件的库
<a href="https://github.com/Seldaek/monolog" target="_blank">Monolog</a>: 一个完整的日志工具
<a href="https://github.com/katzgrau/KLogger" target="_blank">KLogger</a>: 一个易于使用的PSR-3日志类
<h2>电子商务</h2>
——用于支付和构建在线电子商务商店的库和应用
<a href="https://github.com/adrianmacneil/omnipay" target="_blank">OmniPay</a>: 一个多网关支付处理的框架
<a href="https://github.com/payum/payum" target="_blank">Payum</a>: 一个用于支付的抽象库
<a href="http://www.sylius.org/" target="_blank">Sylius</a>: 一个开源的电子商务解决方案
<a href="http://thelia.net/v2/" target="_blank">Thelia</a>: 另一个开源的电子商务解决方案
<a href="https://github.com/mathiasverraes/money" target="_blank">Money</a>: PHP实现的Fowler金钱模式
<a href="https://github.com/sebastianbergmann/money" target="_blank">Sebastian Money</a>: 一个处理货币价值的库
<a href="https://github.com/florianv/swap" target="_blank">Swap</a>: 一个汇率库
<h2>PDF</h2>
——处理PDF文件的库和软件
<a href="https://github.com/KnpLabs/snappy" target="_blank">Snappy</a>: 一个PDF和图像的生成库
<a href="https://github.com/antialize/wkhtmltopdf" target="_blank">WKHTMLToPDF</a>: 一个将HTML转换为PDF的工具
<h2>数据库</h2>
——使用对象关系映射（ORM）或数据映射技术的数据库交互库
<a href="http://www.doctrine-project.org/" target="_blank">Doctrine</a>: 一个完整的DBAL和ORM
<a href="https://github.com/l3pp4rd/DoctrineExtensions" target="_blank">Doctrine Extensions</a>: 一个Doctrine行为的扩展集合
<a href="http://www.propelorm.org/" target="_blank">Propel</a>: 一个快速的ORM，迁移和查询库
<a href="https://github.com/illuminate/database" target="_blank">Eloquent</a>: Laravel 4 ORM
<a href="https://github.com/etrepat/baum" target="_blank">Baum</a>: 一个Eloquent的嵌套集合
<a href="https://github.com/vlucas/spot2" target="_blank">Spot2</a>: MySQL的ORM映射器
<a href="http://redbeanphp.com/" target="_blank">RedBean</a>: 一个轻量级、易配置的ORM
<a href="https://github.com/chanmix51/Pomm" target="_blank">Pomm</a>: 用于PostgreSQL的一个对象模型管理器
<a href="https://github.com/Ocramius/ProxyManager" target="_blank">ProxyManager</a>: 用于数据映射生成代理对象的工具集合
<h2>标记</h2>
——处理标记的库
<a href="http://milesj.me/code/php/decoda" target="_blank">Decoda</a>: 一个轻量级的标记解析库
<a href="https://github.com/michelf/php-markdown" target="_blank">PHP Markdown</a>: Markdown解析器
<a href="https://github.com/thephpleague/commonmark" target="_blank">CommonMark PHP</a>: 一个支持CommonMark spec的Markdown解析器
<a href="https://github.com/dflydev/dflydev-markdown" target="_blank">Dflydev Markdown</a>: 另一个Markdown解析器
<a href="https://github.com/erusev/parsedown" target="_blank">Parsedown</a>: 同样是一个Markdown解析器
<a href="https://github.com/kzykhys/Ciconia" target="_blank">Ciconia</a>: 一个支持Github风格的Markdown解析器
<a href="https://github.com/cebe/markdown" target="_blank">Cebe Markdown</a>: 一个快速、可扩展的Markdown解析器
<a href="https://github.com/Masterminds/html5-php" target="_blank">HTML5 PHP</a>: 一个HTML5解析和序列化的库
<h2>字符串</h2>
——解析和操纵字符串的库
<a href="https://github.com/sensiolabs/ansi-to-html" target="_blank">ANSI to HTML5</a>: 一个将ANSI转换为HTML5的库
<a href="https://github.com/nicolas-grekas/Patchwork-UTF8" target="_blank">Patchwork UTF-8</a>: 处理UTF-8格式字符串的便携库
<a href="https://github.com/hoaproject/String" target="_blank">Hoa String</a>: 另一个UTF-8格式的字符串库
<a href="https://github.com/danielstjules/Stringy" target="_blank">Stringy</a>: 一个多字节支持的字符串操纵库
<a href="https://github.com/mikeemoo/ColorJizz-PHP" target="_blank">Color Jizz</a>: 一个处理和转换颜色的库
<a href="https://github.com/ramsey/uuid" target="_blank">UUID</a>: 生成UUIDs的库
<a href="https://github.com/cocur/slugify" target="_blank">Slugify</a>: 一个将字符串转换为slug格式的库
<a href="https://github.com/jbroadway/urlify" target="_blank">Urlify</a>: 一个Django URLify.js的PHP端口
<a href="https://github.com/kzykhys/Text" target="_blank">Text</a>: 一个文本处理库
<a href="https://github.com/jdorn/sql-formatter/" target="_blank">SQL Formatter</a>: 一个用于格式化SQL语句的库
<a href="https://github.com/tobie/ua-parser/tree/master/php" target="_blank">UA Parser</a>: 一个用于解析用户字符串的库
<h2>数字</h2>
——处理数字的库
<a href="https://github.com/powder96/numbers.php" target="_blank">Numbers PHP</a>: 一个处理数字的库
<a href="https://github.com/moontoast/math" target="_blank">Math</a>: 处理较大数字的库
<a href="https://github.com/gabrielelana/byte-units" target="_blank">ByteUnits</a>: 一个在二进制和测量系统中解析、格式化和转换字节单位的库
<a href="https://github.com/triplepoint/php-units-of-measure" target="_blank">PHP Units of Measure</a>: 一个测量单位间转换的库
<a href="https://github.com/Crisu83/php-conversion" target="_blank">PHP Conversion</a>: 另一个测量单位间转换的库
<a href="https://github.com/giggsey/libphonenumber-for-php" target="_blank">LibPhoneNumber for PHP</a>: PHP实现的Google电话号码处理系统库
<h2>过滤和验证</h2>
——用于过滤和验证数据的库
<a href="https://github.com/ircmaxell/filterus" target="_blank">Filterus</a>: 一个简单的PHP过滤库
<a href="https://github.com/Respect/Validation" target="_blank">Respect Validate</a>: 一个简单的验证库
<a href="https://github.com/vlucas/valitron" target="_blank">Valitron</a>: 另一个数据验证库
<a href="https://github.com/codeguy/Upload" target="_blank">Upload</a>: 一个处理文件上传和验证的库
<a href="https://github.com/rdohms/DMS-Filter" target="_blank">DMS Filter</a>: 一个基于标注的过滤库
<a href="https://github.com/romaricdrigon/MetaYaml" target="_blank">MetaYaml</a>: 支持YAML、JSON和XML的一个模式验证库
<a href="https://github.com/ronanguilloux/IsoCodes" target="_blank">ISO-codes</a>: 验证不同ISO和ZIP编码的库
<h2>REST和API</h2>
——用于开发REST-ful APIs的库和Web框架
<a href="https://github.com/zfcampus/zf-apigility-skeleton" target="_blank">Apigility</a>: 一个使用Zend Framework2构建的API构建器
<a href="https://github.com/willdurand/Hateoas" target="_blank">Hateoas</a>: 一个HATEOAS REST的web服务库
<a href="https://github.com/blongden/hal" target="_blank">HAL</a>: 一个超文本应用语言（HAL）构建库
<a href="https://github.com/willdurand/Negotiation" target="_blank">Negotiation</a>: 一个内容协商库
<a href="https://github.com/leedavis81/drest" target="_blank">Drest</a>: 一个将Doctrine实体展现为REST资源结点的库
<a href="https://github.com/Luracast/Restler" target="_blank">Restler</a>: 一个将PHP方法展现为RESTful web API的轻量级框架
<h2>缓存</h2>
——缓存数据的库
<a href="http://www.php.net/manual/en/book.apc.php" target="_blank">Alternative PHP Cache (APC)</a>: PHP的开源操作码缓存
<a href="https://github.com/doctrine/cache" target="_blank">Cache</a>: 一个缓存库
<a href="https://github.com/tedivm/Stash" target="_blank">Stash</a>: 另一个缓存库
<h2>第三方API</h2>
——访问第三方API的库
<a href="https://github.com/aws/aws-sdk-php" target="_blank">Amazon Web Service SDK</a>: PHP AWS SDK官方库
<a href="https://github.com/gwkunze/S3StreamWrapper" target="_blank">S3 Stream Wrapper</a>: Amazon S3的流包装库
<a href="https://github.com/stripe/stripe-php" target="_blank">Stripe</a>: 官方的Stripe PHP库
<a href="http://campaignmonitor.github.com/createsend-php/" target="_blank">Campaign Monitor</a>: 官方的Campaign Monitor PHP库
<a href="https://github.com/toin0u/DigitalOcean" target="_blank">Digital Ocean</a>: 一个与Digital Ocean API交互的库
<a href="https://github.com/dsyph3r/github-api3-php" target="_blank">Github</a>: 一个与Github API交互的库
<a href="https://github.com/KnpLabs/php-github-api" target="_blank">PHP Github API</a>: 另一个与Github API交互的库
<a href="https://github.com/widop/twitter-oauth" target="_blank">Twitter OAuth</a>: 一个与Twitter’s OAuth工作流交互的库
<a href="https://github.com/widop/twitter-rest" target="_blank">Twitter REST</a>: 一个与Twitter’s REST API交互的库
<a href="https://github.com/dropbox/dropbox-sdk-php" target="_blank">Dropbox SDK</a>: 官方的PHP Dropbox SDK库
<a href="https://github.com/twilio/twilio-php" target="_blank">Twilio</a>: 官方的Twilio PHP REST API
<a href="https://github.com/mailgun/mailgun-php" target="_blank">Mailgun</a>: 官方的Mailgun PHP API
<h2>扩展</h2>
——帮助构建PHP扩展的库
<a href="https://github.com/phalcon/zephir" target="_blank">Zephir</a>: 用于开发PHP扩展的一种在PHP和C++间的编译语言
<a href="http://www.php-cpp.com/" target="_blank">PHP CPP</a>: 一个用于开发PHP扩展的C++库
<h2>PHP安装</h2>
<a href="http://mxcl.github.com/homebrew/" target="_blank">HomeBrew</a>: OSX的包管理器
<a href="https://github.com/josegonzalez/homebrew-php" target="_blank">HomeBrew PHP</a>:一个HomeBrew的PHP接头
<a href="http://php-osx.liip.ch/" target="_blank">PHP OSX</a>: 用于OSX的PHP安装器
<a href="https://github.com/c9s/phpbrew" target="_blank">PHP Brew</a>: 一个PHP的版本管理和安装器
<a href="https://github.com/CHH/phpenv" target="_blank">PHP Env</a>: 一个PHP的版本管理器
<a href="https://github.com/jubianchi/phpswitch" target="_blank">PHP Switch</a>: 另一个PHP的版本管理器
<a href="https://github.com/CHH/php-build" target="_blank">PHP Build</a>: 一个PHP的版本安装器
<a href="http://virtphp.org/" target="_blank">VirtPHP</a>: 一个用来创建和管理独立PHP开发环境的工具
<h2>URL</h2>
——解析URL的库
<a href="https://github.com/jwage/purl" target="_blank">Purl</a>:  一个URL操作库
<a href="https://github.com/jeremykendall/php-domain-parser" target="_blank">PHP Domain Parser</a>:  一个本地的后缀解析器</td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date>2017-01-10 16:29:27</wp:post_date>
		<wp:post_date_gmt>2017-01-10 08:29:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>github%e4%b8%8aphp%e8%b5%84%e6%ba%90%e6%b1%87%e6%80%bb%e5%a4%a7%e5%85%a8%ef%bc%8cphp%e5%ad%a6%e4%b9%a0%e7%9a%84%e5%a5%bd%e8%b5%84%e6%96%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bb%bc%e5%90%88"><![CDATA[综合]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[595942531]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php判断今天是星期几的方法</title>
		<link>https://xqmblog.wordpress.com/2017/01/11/php%e5%88%a4%e6%96%ad%e4%bb%8a%e5%a4%a9%e6%98%af%e6%98%9f%e6%9c%9f%e5%87%a0%e7%9a%84%e6%96%b9%e6%b3%95/</link>
		<pubDate>Wed, 11 Jan 2017 08:16:04 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[这里主要用到了 w 这个参数，关于这个参数的解释是：

w 表示星期中的第几天，数字表示 0（表示星期天）到 6（表示星期六）

&lt;?php
//php获取今天是星期几
function getWeek($unixTime=''){
$unixTime=is_numeric($unixTime)?$unixTime:time();
$weekarray=array('日','一','二','三','四','五','六');
return '星期'.$weekarray[date('w',$unixTime)];
}
echo getWeek();]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2017-01-11 16:16:04</wp:post_date>
		<wp:post_date_gmt>2017-01-11 08:16:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php%e5%88%a4%e6%96%ad%e4%bb%8a%e5%a4%a9%e6%98%af%e6%98%9f%e6%9c%9f%e5%87%a0%e7%9a%84%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[632039842]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>将一个表的查询结果插入到另一个表中</title>
		<link>https://xqmblog.wordpress.com/2017/01/12/%e5%b0%86%e4%b8%80%e4%b8%aa%e8%a1%a8%e7%9a%84%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e6%8f%92%e5%85%a5%e5%88%b0%e5%8f%a6%e4%b8%80%e4%b8%aa%e8%a1%a8%e4%b8%ad/</link>
		<pubDate>Thu, 12 Jan 2017 08:35:08 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>如果表存在（要注意两个表中的字段数要一样）：</strong>
insert into tab1 select * from tab2;
<strong>如果表不存在：</strong>
create table tab1 as select * from tab2;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2017-01-12 16:35:08</wp:post_date>
		<wp:post_date_gmt>2017-01-12 08:35:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%b0%86%e4%b8%80%e4%b8%aa%e8%a1%a8%e7%9a%84%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e6%8f%92%e5%85%a5%e5%88%b0%e5%8f%a6%e4%b8%80%e4%b8%aa%e8%a1%a8%e4%b8%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySql]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[669324461]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/819462722563801089";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP页面转UTF-8编码问题</title>
		<link>https://xqmblog.wordpress.com/2017/01/13/php%e9%a1%b5%e9%9d%a2%e8%bd%acutf-8%e7%bc%96%e7%a0%81%e9%97%ae%e9%a2%98/</link>
		<pubDate>Fri, 13 Jan 2017 09:41:33 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[在代码开始出加入一行

header("Content-Type:text/html;charset=utf-8");

charset 字符编码 可换成相应的编码]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2017-01-13 17:41:33</wp:post_date>
		<wp:post_date_gmt>2017-01-13 09:41:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php%e9%a1%b5%e9%9d%a2%e8%bd%acutf-8%e7%bc%96%e7%a0%81%e9%97%ae%e9%a2%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[707485823]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/819841824600817665";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php dirname(__FILE__) 获取当前文件的绝对路径</title>
		<link>https://xqmblog.wordpress.com/2017/02/15/php-dirname__file__-%e8%8e%b7%e5%8f%96%e5%bd%93%e5%89%8d%e6%96%87%e4%bb%b6%e7%9a%84%e7%bb%9d%e5%af%b9%e8%b7%af%e5%be%84/</link>
		<pubDate>Wed, 15 Feb 2017 03:37:09 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[比如当前文件是放在(d:\www\)下，文件名是testdir.php。
测试的代码如下：

代码如下:
&lt;?php
echo __FILE__ ; // 取得当前文件的绝对地址，结果：D:\www\testdir.php
echo dirname(__FILE__); // 取得当前文件所在的绝对目录，结果：D:\www\
echo dirname(dirname(__FILE__)); //取得当前文件的上一层目录名，结果：D:\
?&gt;
使用方法提示,
dirname(__FILE__) 取到的是当前文件的绝对路径，也就是说，比起相对路径，查找速度是最快的。
如果重复一次可以把目录往上提升一个层次:
比如：$d = dirname(dirname(__FILE__));
其实就是把一个目录给dirname()做参数了．因为dirname()返回最后的目录不带\\或者是/
所以重复使用的时候可以认为　dirname()　把最下层的目录当成文件名来处理了．照常返回
当前目录的上级目录.这样重复就得到了它的上一级的目录.

包含得到上一级目录的文件
include(dirname(__FILE__).'/../filename.php');

__FILE__的路径是当前代码所在文件

dirname(dirname(__FILE__));得到的是文件上一层目录名

dirname(__FILE__);得到的是文件所在层目录名]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2017-02-15 11:37:09</wp:post_date>
		<wp:post_date_gmt>2017-02-15 03:37:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-dirname__file__-%e8%8e%b7%e5%8f%96%e5%bd%93%e5%89%8d%e6%96%87%e4%bb%b6%e7%9a%84%e7%bb%9d%e5%af%b9%e8%b7%af%e5%be%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1870548382]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/831708921589092352";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用JS实现PHP的sprintf函数</title>
		<link>https://xqmblog.wordpress.com/2017/02/16/%e7%94%a8js%e5%ae%9e%e7%8e%b0php%e7%9a%84sprintf%e5%87%bd%e6%95%b0/</link>
		<pubDate>Thu, 16 Feb 2017 07:40:45 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>在拼接字符串时，将字符串与变量穿插拼接，看起来很眼花缭乱，如果象PHP中的sprintf函数那个，将需要用变量表示的地方用“%s”来表示，看起来就清楚多了。</strong>
<pre><code></code>
<code>   function sprintf()</code>
<code>   {</code>
<code>      var arg = arguments,</code>
<code>         str = arg[0] || '',</code>
<code>         i, n;</code>
<code>      for (i = 1, n = arg.length; i 
<code>         str = str.replace(/%s/, arg[i]);</code>
<code>      }</code>
<code>      return str;</code>
<code>   }</code>
<code>   var str = "大家好，我叫%s。今年%s岁了，喜欢%s。呵呵！",</code>
<code>   var1 = "点点",</code>
<code>   var2 = "18",</code>
<code>   var3 = "睡觉",</code>
<code>   str = sprintf(str, var1, var2, var3);</code>
<code>   alert(str);</code>
<code></code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[在拼接字符串时，将字符串与变量穿插拼接，看起来很眼花缭乱，如果象PHP中的sprintf函数那个，将需要用变量表示的地方用“%s”来表示，看起来就清楚多了。]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2017-02-16 15:40:45</wp:post_date>
		<wp:post_date_gmt>2017-02-16 07:40:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%94%a8js%e5%ae%9e%e7%8e%b0php%e7%9a%84sprintf%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/832132611820630016";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1913574637]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php 类似 js indexof与lastindexof 的方法 : strpos() strrpos()</title>
		<link>https://xqmblog.wordpress.com/2017/02/17/php-%e7%b1%bb%e4%bc%bc-js-indexof%e4%b8%8elastindexof-%e7%9a%84%e6%96%b9%e6%b3%95-strpos-strrpos/</link>
		<pubDate>Fri, 17 Feb 2017 08:25:16 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>PHP strpos() 函数</h1>
<div class="backtoreference">

PHP String 函数

</div>
<div>
<h2><a name="t1"></a>定义和用法</h2>
strpos() 函数返回字符串在另一个字符串中第一次出现的位置。

如果没有找到该字符串，则返回 false。
<h3><a name="t2"></a>语法</h3>
<pre><code>strpos(string,find,start)</code></pre>
<pre><code>mb_strpos(string,find,start,charset)//截取中文 (charset 字符集 如utf-8，gb2312)</code></pre>
<table class="dataintable FCK__ShowTableBorders   ">
<tbody>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
<tr>
<td>string</td>
<td>必需。规定被搜索的字符串。</td>
</tr>
<tr>
<td>find</td>
<td>必需。规定要查找的字符。</td>
</tr>
<tr>
<td>start</td>
<td>可选。规定开始搜索的位置。</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><a name="t3"></a>提示和注释</h2>
<p class="note">注释：该函数对大小写敏感。如需进行对大小写不敏感的搜索，请使用 stripos() 函数。</p>

</div>
<div>
<h2><a name="t4"></a>例子</h2>
<pre>&lt;?php
echo <code>strpos("Hello world!","wo")</code>;
?&gt;</pre>
输出：
<pre>6</pre>
</div>
<h1>PHP strripos() 函数</h1>
<div class="backtoreference">

PHP String 函数

</div>
<div>
<h2><a name="t6"></a>定义和用法</h2>
<pre>strrpos() 函数查找字符串在另一个字符串中最后一次出现的位置。</pre>
如果成功，则返回位置，否则返回 false。
<h3><a name="t7"></a>语法</h3>
<pre><code>strrpos(string,find,start)</code></pre>
<table class="dataintable FCK__ShowTableBorders   ">
<tbody>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
<tr>
<td>string</td>
<td>必需。规定被搜索的字符串。</td>
</tr>
<tr>
<td>find</td>
<td>必需。规定要查找的字符。</td>
</tr>
<tr>
<td>start</td>
<td>可选。规定开始搜索的位置。</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><a name="t8"></a>提示和注释</h2>
<p class="note">注释：该函数对大小写不敏感。如需进行大小写敏感的查找，请使用 strrpos()。</p>

</div>
<div>
<h2><a name="t9"></a>例子</h2>
<pre><code>&lt;?php
echo strripos("Hello world!","WO");
?&gt;</code></pre>
输出：
<pre>6</pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2017-02-17 16:25:16</wp:post_date>
		<wp:post_date_gmt>2017-02-17 08:25:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-%e7%b1%bb%e4%bc%bc-js-indexof%e4%b8%8elastindexof-%e7%9a%84%e6%96%b9%e6%b3%95-strpos-strrpos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/832506203301376001";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1952596630]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP cURL实现发送Get和Post请求</title>
		<link>https://xqmblog.wordpress.com/2017/02/21/curl_request/</link>
		<pubDate>Tue, 21 Feb 2017 09:18:01 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[cURL可以使用URL的语法模拟浏览器来传输数据，

因为它是模拟浏览器，因此它同样支持多种协议，

FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE 以及 LDAP等协议都可以很好的支持，包括一些：

HTTPS认证，HTTP POST方法，HTTP PUT方法，FTP上传，keyberos认证，HTTP上传，代理服务器，cookies，用户名/密码认证，

下载文件断点续传，上传文件断点续传，http代理服务器管道，甚至它还支持IPv6，scoket5代理服务器，通过http代理服务器上传文件到FTP服务器等等。

下面是把<strong>post</strong>和<strong>get</strong>请求封装成了一个方法，方便调用
<pre><code>/**</code>
<code>* curl 函数</code>
<code>* @param string $url 请求的地址</code>
<code>* @param string $type POST/GET/post/get</code>
<code>* @param array $data 要传输的数据</code>
<code>* @param string $err_msg 可选的错误信息（引用传递）</code>
<code>* @param int $timeout 超时时间</code>
<code>* @param array $cert_info 证书信息</code>
<code>*/</code>
<code>public function curl_request($url, $type, $data = false, $err_msg = null, $timeout = 20, $cert_info = array())</code>
<code>{</code>
<code>    $type = strtoupper($type);</code>
<code>    if ($type == 'GET' &amp;&amp; is_array($data)) {</code>
<code>        $data = http_build_query($data);</code>
<code>    }</code>

<code>    $option = array();</code>

<code>    if ( $type == 'POST' ) {</code>
<code>        $option[CURLOPT_POST] = 1;</code>
<code>    }</code>
<code>    if ($data) {</code>
<code>        if ($type == 'POST') {</code>
<code>            $option[CURLOPT_POSTFIELDS] = $data;</code>
<code>        } elseif ($type == 'GET') {</code>
<code>            $url = strpos($url, '?') !== false ? $url.'&amp;'.$data :  $url.'?'.$data;</code>
<code>        }</code>
<code>    }</code>

<code>    $option[CURLOPT_URL]            = $url;</code>
<code>    $option[CURLOPT_FOLLOWLOCATION] = TRUE;</code>
<code>    $option[CURLOPT_MAXREDIRS]      = 4;</code>
<code>    $option[CURLOPT_RETURNTRANSFER] = TRUE;</code>
<code>    $option[CURLOPT_TIMEOUT]        = $timeout;</code>

<code>    //设置证书信息</code>
<code>    if(!empty($cert_info) &amp;&amp; !empty($cert_info['cert_file'])) {</code>
<code>    $option[CURLOPT_SSLCERT]       = $cert_info['cert_file'];</code>
<code>    $option[CURLOPT_SSLCERTPASSWD] = $cert_info['cert_pass'];</code>
<code>    $option[CURLOPT_SSLCERTTYPE]   = $cert_info['cert_type'];</code>
<code>    }</code>

<code>    //设置CA</code>
<code>    if(!empty($cert_info['ca_file'])) {</code>
<code>        // 对认证证书来源的检查，0表示阻止对证书的合法性的检查。1需要设置CURLOPT_CAINFO</code>
<code>        $option[CURLOPT_SSL_VERIFYPEER] = 1;</code>
<code>        $option[CURLOPT_CAINFO] = $cert_info['ca_file'];</code>
<code>    } else {</code>
<code>        // 对认证证书来源的检查，0表示阻止对证书的合法性的检查。1需要设置CURLOPT_CAINFO</code>
<code>        $option[CURLOPT_SSL_VERIFYPEER] = 0;</code>
<code>    }</code>

    //初始化
<code>    $ch = curl_init();</code>
<code>    curl_setopt_array($ch, $option);
    //设置，访问页面的来源地址
    curl_setopt($ch,CURLOPT_REFERER,"http://".$_SERVER['HTTP_HOST']);
</code>    //执行并获取结果 
<code>    $response = curl_exec($ch);</code>
<code>    $curl_no  = curl_errno($ch);</code>
<code>    $curl_err = curl_error($ch);
</code>    //释放cURL句柄
<code>    curl_close($ch);</code>

<code>    // error_log</code>
<code>    if($curl_no &gt; 0) {</code>
<code>        if($err_msg !== null) {</code>
<code>            $err_msg = '('.$curl_no.')'.$curl_err;</code>
<code>        }</code>
<code>    }</code>
<code>    return $response;</code>
<code>}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2017-02-21 17:18:01</wp:post_date>
		<wp:post_date_gmt>2017-02-21 09:18:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curl_request</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2089291148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/833969030071459841";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[php-curl%e5%ae%9e%e7%8e%b0%e5%8f%91%e9%80%81get%e5%92%8cpost%e8%af%b7%e6%b1%82]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php排序之快速排序、冒泡排序</title>
		<link>https://xqmblog.wordpress.com/2017/02/24/php_sort/</link>
		<pubDate>Fri, 24 Feb 2017 03:43:34 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的
所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以</code>递归<code>进行，
以此达到整个数据变成有序序列。

<img class="alignnone size-full wp-image-212" src="https://xqmblog.files.wordpress.com/2017/02/quick_sort.gif" alt="quick_sort" width="220" height="168" />

//快速排序
function quick_sort($array)
{
    $size=count($array);//得到数组总长度
    if($size&gt;1)
    {
        $first=$array[0];//拿出第一个作为标尺
        $front=array();//前面的数组 存比标尺小的数
        $back=array();//后面的数组 存比标尺大的数
        for ($i=1; $i &lt; $size; $i++) 
        { 
            if($array[$i]&lt;=$first)
            {
                $front[]=$array[$i];//如果小于等于标尺 就放入前面的数组
            }else
            {
                $back[]=$array[$i];//如果大于标尺 就放入后面的数组
            }
        }
        $front=quick_sort($front);//递归的对前面一半数组排序
        $back=quick_sort($back);//递归的对后面一半数组排序
        return array_merge($front,array($first),$back);//合并开始前面 中间 后面
    }else
    {
        return $array;//如果数组只有一个长度 没必要排序 直接返回
    }
}

</code></pre>
<pre><code>//调用
$array=array(10,9,8,7,6,5,4,3,2,1);
$result=my_quick_sort($array);
var_dump($result);

//输出
array(10) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) [3]=&gt; int(4) [4]=&gt; int(5) [5]=&gt; int(6) [6]=&gt; int(7) [7]=&gt; int(8) [8]=&gt; int(9) [9]=&gt; int(10) }
</code></pre>
<pre><strong>冒泡排序比较简单。作为很多公司面试笔试题常常出现，要求手写该排序算法。</strong>
<strong>双层循环，不断的与后面的比较，如果大于后面的，调换两者顺序即可。

演示效果如图：</strong><code>
<img class="alignnone size-full wp-image-217" src="https://xqmblog.files.wordpress.com/2017/02/bubblesort.gif" alt="bubblesort" width="300" height="180" />

//冒泡排序</code>
<code>function bubbleSort($array=array())
{
    $length=count($array);//获取数组长度
    for ($i=0; $i &lt; $length ; $i++)
    {
        #循环数组
        for ($j=$i+1; $j &lt; $length ; $j++)
        {
            # 本身与本身后面的人进行比较
            if($array[$i]&gt;$array[$j])
            {
                //顺序不对 要调换  实现冒泡
                //两数换值
                $tmp=$array[$i];//将第一个值给临时变量
                $array[$i]=$array[$j];//把j的值给i
                $array[$j]=$tmp;//把tmp给j
            }
        }
    }
    return $array;//返回数组
}
</code></pre>
<pre><code>//调用</code>
<code>$array=array(10,9,8,7,6,5,4,3,2,1);
$result=bubbleSort($array);
var_dump($result);</code></pre>
<pre>//输出
array(10) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) [3]=&gt; int(4) [4]=&gt; int(5) [5]=&gt; int(6) [6]=&gt; int(7) [7]=&gt; int(8) [8]=&gt; int(9) [9]=&gt; int(10) }</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2017-02-24 11:43:34</wp:post_date>
		<wp:post_date_gmt>2017-02-24 03:43:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php_sort</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/834972030546096128";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2193903081]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[php%e6%8e%92%e5%ba%8f%e4%b9%8b%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e3%80%81%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP file_put_contents 函数：将字符串写入或追加到文件</title>
		<link>https://xqmblog.wordpress.com/2017/02/24/php-file_put_contents-%e5%87%bd%e6%95%b0%ef%bc%9a%e5%b0%86%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%86%99%e5%85%a5%e6%88%96%e8%bf%bd%e5%8a%a0%e5%88%b0%e6%96%87%e4%bb%b6/</link>
		<pubDate>Fri, 24 Feb 2017 07:53:29 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>file_put_contents() 函数用于把字符串写入文件，成功返回写入到文件内数据的字节数，失败则返回 FALSE。</strong>

语法
<pre><code>int file_put_contents ( string filename, string data [, int flags [, resource context]] )
</code></pre>
<table class="table"><caption>参数说明：</caption>
<tbody>
<tr>
<th width="15%">参数</th>
<th>说明</th>
</tr>
<tr>
<td>filename</td>
<td>要写入数据的文件名</td>
</tr>
<tr>
<td>data</td>
<td>要写入的数据。类型可以是 string，array（但不能为多维数组），或者是 stream 资源</td>
</tr>
<tr>
<td>flags</td>
<td>可选，规定如何打开/写入文件。可能的值：
<ol>
	<li>FILE_USE_INCLUDE_PATH：检查 filename 副本的内置路径</li>
	<li>FILE_APPEND：在文件末尾以追加的方式写入数据</li>
	<li>LOCK_EX：对文件上锁</li>
</ol>
</td>
</tr>
<tr>
<td>context</td>
<td>可选，Context是一组选项，可以通过它修改文本属性</td>
</tr>
</tbody>
</table>
<pre><code>例子：

&lt;?php
echo file_put_contents("test.txt", "This is something.");
?&gt;

输出：18

而 test.txt 文件（与程序同目录下）内容则为：This is something.

提示
如果文件不存在，则创建文件，相当于fopen()函数行为。
如果文件存在，默认将清空文件内的内容，可设置 flags 参数值为 FILE_APPEND 以避免（见下）。
本函数可安全用于二进制对象。
</code></pre>
<h2>以追加形式写入内容</h2>
当设置 flags 参数值为 FILE_APPEND 时，表示在已有文件内容后面追加内容的方式写入新数据：
<pre><code>&lt;?php
file_put_contents("test.txt", "This is another something.", FILE_APPEND);
?&gt;

执行程序后，test.txt 文件内容变为：This is something.This is another something.
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2017-02-24 15:53:29</wp:post_date>
		<wp:post_date_gmt>2017-02-24 07:53:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-file_put_contents-%e5%87%bd%e6%95%b0%ef%bc%9a%e5%b0%86%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%86%99%e5%85%a5%e6%88%96%e8%bf%bd%e5%8a%a0%e5%88%b0%e6%96%87%e4%bb%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/835034920263254017";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2199137705]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>上了这套密码锁，你就无敌了</title>
		<link>https://xqmblog.wordpress.com/2017/03/01/nb_pwd/</link>
		<pubDate>Wed, 01 Mar 2017 05:51:08 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[按照重要性不同，我们把密码分成ABC三大类：

<strong>A类</strong>：<strong>极客密码</strong>，比如银行账户、支付宝、重要邮件密码，以及涉及个人重要隐私的网盘、相册密码等，该类最烧脑，要各个不同。

<strong>B类：高频密码</strong>，比如QQ、微博、FB等社交工具，以及经常登录的网站密码，该类使用频次高，又涉及个人隐私，建议至少提供3种以上的密码选择。

<strong>C类：临时密码</strong>，对于一些临时或偶尔使用的网站，又无关利益，不需要特别记忆，统一标准就好。

按照个人癖好，我们先挑软的柿子捏。
<h4>针对C类，在下的建议是：为了最简化，统一使用一种密码。</h4>
比如自己所在城市，比如shanghai，beijing，或者母校的名字，如Harvard<a href="http://www.jianshu.com/writer#/" target="_blank">，</a>Oxford或者偶像名字的全拼，如JJlinjunjie，fanbingbing。

关键是要统一，当然必要时可以临时再注册或者忘记密码。
<h4>针对B类，一句话就能搞定。</h4>
比如Gwyb82ndlf（给我一杯82年的拉菲）

这句话可以从座右铭、歌词、吐槽、台词、名言等地方寻找，但尽量要长点。

比如座右铭：

Wwjylhnsgzjlddf（万物皆有裂痕，那是光照进来的地方）

Sybrrwyrblsy（岁月不饶人，我亦饶不了岁月）

Tcs99%dhsjs1%dlg（天才是99%的汗水，加上1%的灵感）

&nbsp;

漂亮得不像话的歌词：

Wdsdmdmjm（无敌是多么多么寂寞——《无敌》）

Chysxttlac（沧海一声笑，滔滔两岸潮——《沧海一声笑》）

&nbsp;

经典台词：

Shjxqklnyybhzdxymhddsm（生活就像巧克力,你永远不会知道下一秒你会得到什么——《阿甘正传》）

Nnbwbyhx（念念不忘，必有回响。——《一代宗师》）

Fuck and Son of a bitch（各种美剧里）

&nbsp;

神吐槽：

Rqsdgsrfhxwa（人穷啥都干，杀人放火写文案）

Yiwsjqrftrjjqswrft（以前，我视金钱如粪土；如今，金钱视我如粪土。）

Xshswwynzldsh（性生活是我唯一能自理的生活）

&nbsp;
<h4>当然，字母+数字才是绝配，否则就像大龄青年找不到对象一样，让人有点小尴尬。</h4>
数字的话，如果你坚持使用生日，也没有问题，可以把生日放入那一串的前面、后面或中间，如Wdsdmdmjm19900308。

当然，除了生日外，还有身高、门牌号、电话号、车牌号、纪念日等数字可供选择。（体重就算了）

&nbsp;

如想再加密，可以把自己的幸运数字变成特殊符号，“shift+5”=“%”，把其中数字5替换成%。

到这里的话，针对B类的基本够用。但是切记一点，不要用自己的口头语做密码，否则不定哪天醉酒，你就当笑话公之于众了。

<img class="alignnone size-full wp-image-242" src="https://xqmblog.files.wordpress.com/2017/03/wd.jpg" alt="wd" width="595" height="373" />
<h4>针对A类，一般建议“数字+字母+特殊符号”都包括，有的还自带特殊加密，当然，这个主要看专长。</h4>
&nbsp;

学化学的会利用方程式，比如3Cu+8HNO3=3Cu(NO3)2+2NO+4H2O。

学音乐的会利用音乐简谱，比如《同桌的你》的简谱：555-576-440-444-432-110

学中文的会用诗词，比如ppnn13%dkstFeb.1st（娉娉袅袅十三余，豆蔻梢头二月初），“停车坐爱枫林晚，霜叶红于二月花”则是一个公式（tcmlflw,syred&gt;Febhua）。

最装逼的是在密码里编入自己的故事，美其名曰：“设计密码最重要的是，让密码体现你作为一个人的独特本体！”。（好吧，我服了。）

现身说法：5670754（儿时电话）+Sww（小学暗恋的女孩名字）+<a href="http://www.jianshu.com/writer#/" target="_blank">499</a>（中考分数）+24（高中名）+history（大学专业）+***（工资是秘密）结果就是5670754Sww49924history***。

&nbsp;

通过以上方法，如果你还坚持用生日裸奔，在下只能说“施主，你高兴就好”。

当然，密码设置好还不算完，别忘了要备份。

相信我，别太高估自己的智商。

除非你有杨过的记忆力+李寻欢的自控力，才能说说这大话。

否则自己何苦为难自己。

&nbsp;

转。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2017-03-01 13:51:08</wp:post_date>
		<wp:post_date_gmt>2017-03-01 05:51:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nb_pwd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bb%bc%e5%90%88"><![CDATA[综合]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/836816075434168320";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2372487189]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%8a%e4%ba%86%e8%bf%99%e5%a5%97%e5%af%86%e7%a0%81%e9%94%81%ef%bc%8c%e4%bd%a0%e5%b0%b1%e6%97%a0%e6%95%8c%e4%ba%86]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>js判断用户的浏览器设备是移动端还是pc端</title>
		<link>https://xqmblog.wordpress.com/2017/03/07/js%e5%88%a4%e6%96%ad%e7%94%a8%e6%88%b7%e7%9a%84%e6%b5%8f%e8%a7%88%e5%99%a8%e8%ae%be%e5%a4%87%e6%98%af%e7%a7%bb%e5%8a%a8%e7%ab%af%e8%bf%98%e6%98%afpc%e7%ab%af/</link>
		<pubDate>Tue, 07 Mar 2017 10:44:59 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[网站页面中需要根据用户的访问设备的不同来显示不同的页面样式，主要是判断移动设备还是电脑浏览器访问的。
<pre><code>
        function browserRedirect() {
            var sUserAgent = navigator.userAgent.toLowerCase();
            var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
            var bIsIphoneOs = sUserAgent.match(/iphone os/i) == "iphone os";
            var bIsMidp = sUserAgent.match(/midp/i) == "midp";
            var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
            var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
            var bIsAndroid = sUserAgent.match(/android/i) == "android";
            var bIsCE = sUserAgent.match(/windows ce/i) == "windows ce";
            var bIsWM = sUserAgent.match(/windows mobile/i) == "windows mobile";
            document.writeln("您的浏览设备为：");
            if (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) {
                document.writeln("phone");
            } else {
                document.writeln("pc");
            }
        }

        browserRedirect();


用电脑上的浏览器，android设备，iphone，ipad均做过测试，此代码可行，各设备判断均正确。
</code></pre>
<pre><code>//判断是否微信浏览器中打开
function is_weixn(){  
    var ua = navigator.userAgent.toLowerCase();  
    if(ua.match(/MicroMessenger/i)=="micromessenger") {  
        return true;  
    } else {  
        return false;  
    }  
} </code></pre>
<pre><code>本文转自：<a href="http://www.cnblogs.com/babycool/" target="_blank">http://www.cnblogs.com/babycool/</a></code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2017-03-07 18:44:59</wp:post_date>
		<wp:post_date_gmt>2017-03-07 10:44:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>js%e5%88%a4%e6%96%ad%e7%94%a8%e6%88%b7%e7%9a%84%e6%b5%8f%e8%a7%88%e5%99%a8%e8%ae%be%e5%a4%87%e6%98%af%e7%a7%bb%e5%8a%a8%e7%ab%af%e8%bf%98%e6%98%afpc%e7%ab%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/839064342804983808";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2593649411]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>移动站适配rel=alternate PC页和H5页适配标注</title>
		<link>https://xqmblog.wordpress.com/2017/03/09/%e7%a7%bb%e5%8a%a8%e7%ab%99%e9%80%82%e9%85%8drelalternate-pc%e9%a1%b5%e5%92%8ch5%e9%a1%b5%e9%80%82%e9%85%8d%e6%a0%87%e6%b3%a8/</link>
		<pubDate>Thu, 09 Mar 2017 02:38:04 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[鉴于移动化大潮的汹涌和H5页的炫丽普及，百度针对PC页与H5页的跳转适配方式推出了最优方案：
1.在pc版网页上，添加指向对应移动版网址的特殊链接rel="alternate"标记，这有助于百度发现网站的移动版网页所在的位置；
2.同时在移动版网页上，添加指向对应pc版网址的链接rel="canonical"标记。

电脑端网站截图：

<img class="alignnone size-full wp-image-257" src="https://xqmblog.files.wordpress.com/2017/03/pc.jpg" alt="pc" width="755" height="305" />

移动端网站截图：

<img class="alignnone size-full wp-image-259" src="https://xqmblog.files.wordpress.com/2017/03/mobile.jpg" alt="mobile" width="767" height="367" />

如果你的网址是：
pc版网址：http://pc_url
移动版网址：http://mobile_url
那么此示例中的注释如下所示：
在pc版网页(http://pc_url) 上，添加：

<code>&lt;link rel="alternate" media="only screen and(max-width: 640px)" href="http://pc_url" &gt;</code>

在移动版网页(http://mobile_url) 上，所需的注释应为:

<code>&lt;link rel="canonical" href="http://mobile_url" &gt;</code>

之前的Meta标记（mobile agent）会继续沿用，但我们推荐使用HTMAL5语言制作的移动页面使用最新方案进行跳转适配，其它如xml语言的移动页跳转适配，需要继续使用之前的meta标记方式:

<code>&lt;meta name="mobile-agent"content="format=[wml|xhtml|html5]; url=mobile_url"&gt;</code>

&nbsp;

转。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2017-03-09 10:38:04</wp:post_date>
		<wp:post_date_gmt>2017-03-09 02:38:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%a7%bb%e5%8a%a8%e7%ab%99%e9%80%82%e9%85%8drelalternate-pc%e9%a1%b5%e5%92%8ch5%e9%a1%b5%e9%80%82%e9%85%8d%e6%a0%87%e6%b3%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bb%bc%e5%90%88"><![CDATA[综合]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/839666584989892608";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2660374274]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql把查询结果保存为sql文件</title>
		<link>https://xqmblog.wordpress.com/2017/03/10/mysql%e6%8a%8a%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e4%bf%9d%e5%ad%98%e4%b8%basql%e6%96%87%e4%bb%b6/</link>
		<pubDate>Fri, 10 Mar 2017 07:31:35 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[有时候需要从表中抽取一部分数据，然后导出来，没必要用导出命令是mysqldump 导出整张表

下面两个指令就可以解决这个问题了

在服务器端可以用select into outfile 命令把查询结果保存到一个可写的目录中：

使用Navicat for MySql等也适用

<code>mysql&gt; select * from article limit 150 into outfile '/test/article.sql';</code>

然后把article.sql文件下载到本地电脑上，通过load data local infile into table 命令来导入这个查询结果文件：

<code>mysql&gt;load data local infile "D:/study/article.sql" into table article;</code>

这样就阔以了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2017-03-10 15:31:35</wp:post_date>
		<wp:post_date_gmt>2017-03-10 07:31:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql%e6%8a%8a%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e4%bf%9d%e5%ad%98%e4%b8%basql%e6%96%87%e4%bb%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySql]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2705578519]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/840102839733047297";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JS判断字符串是否包含某字符串 indexOf()方法使用</title>
		<link>https://xqmblog.wordpress.com/2017/03/15/js%e5%88%a4%e6%96%ad%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%98%af%e5%90%a6%e5%8c%85%e5%90%ab%e6%9f%90%e5%ad%97%e7%ac%a6%e4%b8%b2-indexof%e6%96%b9%e6%b3%95%e4%bd%bf%e7%94%a8/</link>
		<pubDate>Wed, 15 Mar 2017 09:32:28 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=292</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>indexOf()方法可返回某个指定的字符串值在字符串中首次出现的位置。</strong>

语法：

stringObject.indexOf(searchvalue,fromindex)
<table border="1" width="549" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td><strong>参数</strong></td>
<td><strong>描述</strong></td>
</tr>
<tr>
<td>searchvalue</td>
<td>必需。规定需检索的字符串值。</td>
</tr>
<tr>
<td>fromindex</td>
<td>可选的整数参数。规定在字符串中开始检索的位置.它的合法取值是0到stringObject.length-1。如省略该参数,则将从字符串的首字符开始检索。</td>
</tr>
</tbody>
</table>
indexOf方法返回一个整数值,stringObject中的字符位置是从0开始的。如果没有找到子字符串，则返回 - 1。


var str = "Hello Word!";
alert(str.indexOf("Word")); //6
if(str.indexOf("Hello")!=-1){
alert("包含");
}else{
alert("不包含");
}
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date>2017-03-15 17:32:28</wp:post_date>
		<wp:post_date_gmt>2017-03-15 09:32:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>js%e5%88%a4%e6%96%ad%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%98%af%e5%90%a6%e5%8c%85%e5%90%ab%e6%9f%90%e5%ad%97%e7%ac%a6%e4%b8%b2-indexof%e6%96%b9%e6%b3%95%e4%bd%bf%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2885550206]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/841945195235139585";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP获取每个月的最后一个周五日期</title>
		<link>https://xqmblog.wordpress.com/2017/03/16/getfridaydate/</link>
		<pubDate>Thu, 16 Mar 2017 07:02:31 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[在网上看到的，感觉不错就记下来了，说不定以后用到。
<pre class="hljs php"><span class="hljs-comment">/**
 * 返回指定年份的月份最后周五日期
 * 
 *<span class="hljs-phpdoc"> @param</span>  integer $month 月份
 *<span class="hljs-phpdoc"> @param</span>  integer $year  年份
 *<span class="hljs-phpdoc"> @return</span> 日期        YYYY-MM-DD
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFridayDate</span><span class="hljs-params">(<span class="hljs-variable">$month</span>, <span class="hljs-variable">$year</span> = null)</span>
</span>{
    <span class="hljs-variable">$months</span> = [
        <span class="hljs-number">1</span>  =&gt; <span class="hljs-string">'January'</span>,
        <span class="hljs-number">2</span>  =&gt; <span class="hljs-string">'February'</span>,
        <span class="hljs-number">3</span>  =&gt; <span class="hljs-string">'March'</span>,
        <span class="hljs-number">4</span>  =&gt; <span class="hljs-string">'April'</span>,
        <span class="hljs-number">5</span>  =&gt; <span class="hljs-string">'May'</span>,
        <span class="hljs-number">6</span>  =&gt; <span class="hljs-string">'June '</span>,
        <span class="hljs-number">7</span>  =&gt; <span class="hljs-string">'July'</span>,
        <span class="hljs-number">8</span>  =&gt; <span class="hljs-string">'August'</span>,
        <span class="hljs-number">9</span>  =&gt; <span class="hljs-string">'September'</span>,
        <span class="hljs-number">10</span> =&gt; <span class="hljs-string">'October'</span>,
        <span class="hljs-number">11</span> =&gt; <span class="hljs-string">'November'</span>,
        <span class="hljs-number">12</span> =&gt; <span class="hljs-string">'December'</span>,
    ];

    <span class="hljs-keyword">if</span> (! array_key_exists(<span class="hljs-variable">$month</span>, <span class="hljs-variable">$months</span>)) {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
    }

    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$year</span> == <span class="hljs-keyword">null</span>) {
        <span class="hljs-variable">$year</span> = date(<span class="hljs-string">'Y'</span>);
    }

    <span class="hljs-keyword">return</span> date(<span class="hljs-string">'Y-m-d'</span>, strtotime(<span class="hljs-string">'last Friday of '</span> . <span class="hljs-variable">$months</span>[<span class="hljs-variable">$month</span>] . <span class="hljs-string">' '</span> . <span class="hljs-variable">$year</span>));
}

<span class="hljs-keyword">echo</span> getFridayDate(<span class="hljs-number">2</span>);        <span class="hljs-comment">// 2017-02-24</span>
<span class="hljs-keyword">echo</span> getFridayDate(<span class="hljs-number">3</span>, <span class="hljs-number">2017</span>);  <span class="hljs-comment">// 2017-03-31</span></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2017-03-16 15:02:31</wp:post_date>
		<wp:post_date_gmt>2017-03-16 07:02:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getfridaydate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/842269847522279424";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[2920069683]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[php%e8%8e%b7%e5%8f%96%e6%af%8f%e4%b8%aa%e6%9c%88%e7%9a%84%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e5%91%a8%e4%ba%94%e6%97%a5%e6%9c%9f]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php获取当前毫秒时间戳</title>
		<link>https://xqmblog.wordpress.com/2017/03/23/msectime/</link>
		<pubDate>Thu, 23 Mar 2017 03:06:49 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=319</guid>
		<description></description>
		<content:encoded><![CDATA[用php的time()函数来获取时间戳，获取的时间精确到秒级别，但是想获取到毫秒级就不行了

虽然在php没有自带的函数能获取毫秒时间戳，但提供了一个microtime()函数

<code>echo microtime();</code>

输出的是：0.02593300 1490238047

它的结果是分两部分的，也就是前半部分是毫秒（但是单位是秒），后半部分是秒。

这样我们获取获取到毫秒就好办了，修改一下就阔以了

<code>function  msectime(){</code>
<code>    list($msec, $sec) = explode(' ', microtime());</code>
<code>    return (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);</code>
<code>}</code>

<code>echo msectime();</code>

输出：1490238248638

注意：sprintf('%.0f', $num) 是输出不含小数部分的浮点数

我把时间戳改成毫秒级别后，再次更新数据库数据时，却提示超出范围，原来之前我在数据库中是用int型来存储time()函数获取的秒级别的时间戳，存储范围是够的，改成毫秒级别的，就得改成BIGINT类型了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date>2017-03-23 11:06:49</wp:post_date>
		<wp:post_date_gmt>2017-03-23 03:06:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>msectime</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/844747246721798145";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[3170844317]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[php%e8%8e%b7%e5%8f%96%e5%bd%93%e5%89%8d%e6%af%ab%e7%a7%92%e6%97%b6%e9%97%b4%e6%88%b3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gettimestamp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分享按钮</title>
		<link>https://xqmblog.wordpress.com/2017/03/29/jssharebutton/</link>
		<pubDate>Wed, 29 Mar 2017 02:45:42 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[最近在做网站，有文章分享功能，于是在网上找了一下

试过了挺好用的

<img class="alignnone size-full wp-image-392" src="https://xqmblog.files.wordpress.com/2017/03/sharecode.png" alt="shareCode.png" width="938" height="600" />

效果图：

<img class="alignnone size-full wp-image-355" src="https://xqmblog.files.wordpress.com/2017/03/share.png" alt="share" width="203" height="53" />

这是百度的百度分享，还可以设置按钮类型、位置、大小等；还有划词分享、图片分享。

传送门：http://share.baidu.com/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2017-03-29 10:45:42</wp:post_date>
		<wp:post_date_gmt>2017-03-29 02:45:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jssharebutton</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/846916266686337026";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[3387404407]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript中sessionStorage和localStorage用法</title>
		<link>https://xqmblog.wordpress.com/2017/05/05/sessionstorage_localstorage/</link>
		<pubDate>Fri, 05 May 2017 07:50:58 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。

而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。

web storage和cookie的区别

Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。

除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。

但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生（来自@otakustay 的纠正）

html5 web storage的浏览器支持情况

浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。

要判断浏览器是否支持localStorage可以使用下面的代码：

<code>if(window.localStorage){ </code>

<code>alert("浏览支持localStorage") </code>

<code>}else{ </code>

<code>alert("浏览暂不支持localStorage") </code>

<code>} </code>

<code>//或者 </code>

<code>if(typeof window.localStorage == 'undefined'){ </code>

<code>alert("浏览暂不支持localStorage")</code>

<code> }</code>

localStorage和sessionStorage操作

localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等

localStorage和sessionStorage的方法

setItem存储value

用途：将value存储到key字段 用法：.setItem( key, value) 代码示例：

sessionStorage.setItem("key", "value");     localStorage.setItem("site", "js8.in");
getItem获取value

用途：获取指定key本地存储的值 用法：.getItem(key) 代码示例：

var value = sessionStorage.getItem("key");     var site = localStorage.getItem("site");
removeItem删除key

用途：删除指定key本地存储的值 用法：.removeItem(key) 代码示例：

sessionStorage.removeItem("key");     localStorage.removeItem("site");
clear清除所有的key/value

用途：清除所有的key/value 用法：.clear() 代码示例：

sessionStorage.clear();     localStorage.clear();

<code> </code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2017-05-05 15:50:58</wp:post_date>
		<wp:post_date_gmt>2017-05-05 07:50:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sessionstorage_localstorage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/860401432570277889";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[4720299952]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e4%b8%adsessionstorage%e5%92%8clocalstorage%e7%94%a8%e6%b3%95]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jQuery checkbox 全选和全不选</title>
		<link>https://xqmblog.wordpress.com/2017/05/10/jq_checkall/</link>
		<pubDate>Wed, 10 May 2017 10:29:11 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=407</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>让复选框全部选中和全部取消是比较常用的</strong>

<strong>JavaScript部分：</strong>
<pre class="line-numbers language-javascript code-toolbar"><code class=" language-javascript"><span class="token keyword keyword-function">function</span> <span class="token function">checkAll</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box input[type='checkbox']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<strong>html部分：</strong>
<pre class="line-numbers language-html code-toolbar"><code class=" language-html"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkAll(this)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>全选<span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token punctuation">&lt;</span><span class="token tag-id">br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token punctuation">&lt;/</span><span class="token tag-id">div</span><span class="token punctuation">&gt;</span></span></code></pre>
&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date>2017-05-10 18:29:11</wp:post_date>
		<wp:post_date_gmt>2017-05-10 10:29:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jq_checkall</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[4894097385]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/862253191290789892";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[checkbox-%e5%85%a8%e9%80%89%e5%92%8c%e5%85%a8%e4%b8%8d%e9%80%89]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>计算php运行时间（毫秒数）</title>
		<link>https://xqmblog.wordpress.com/2017/05/15/phpruntime/</link>
		<pubDate>Mon, 15 May 2017 02:41:43 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=418</guid>
		<description></description>
		<content:encoded><![CDATA[非常简单

<code>$t1 = microtime(true);</code>

<code>//php script here</code>

<code>$t2 = microtime(true);</code>
<code>echo (($t2-$t1)*1000).'ms';</code>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date>2017-05-15 10:41:43</wp:post_date>
		<wp:post_date_gmt>2017-05-15 02:41:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>phpruntime</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/863947490604789762";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[5051176222]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JS中获取当前日期（年-月-日）</title>
		<link>https://xqmblog.wordpress.com/2017/05/20/jsgetdate/</link>
		<pubDate>Sat, 20 May 2017 09:01:57 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=423</guid>
		<description></description>
		<content:encoded><![CDATA[需要获取当前的日期，但是js有没有像PHP那样有date('Y-m-d',time())就可以获取

所以就只能自己拼接

<code>// 获取当前日期</code>
<code>var date = new Date();</code>

<code>// 获取当前月份（月份是从0开始，所以要加1）</code>
<code>var nowMonth = date.getMonth() + 1;</code>

<code>// 获取当前是几号</code>
<code>var strDate = date.getDate();</code>

<code>// 添加分隔符“-”</code>
<code>var seperator = "-";</code>

<code>// 对月份进行处理，1-9月在前面添加一个“0”</code>
<code>if (nowMonth &gt;= 1 &amp;&amp; nowMonth &lt;= 9) {</code>
<code> nowMonth = "0" + nowMonth;</code>
<code>}</code>

<code>// 对月份进行处理，1-9号在前面添加一个“0”</code>
<code>if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) {</code>
<code> strDate = "0" + strDate;</code>
<code>}</code>

// 最后拼接字符串，得到一个格式为(yyyy-MM-dd)的日期（date.getFullYear()得到的是4位数得年份，比如：2017 ；date.getYear()得到得是2位数得年份，比如：17）
var nowDate = date.getFullYear() + seperator + nowMonth + seperator + strDate;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date>2017-05-20 17:01:57</wp:post_date>
		<wp:post_date_gmt>2017-05-20 09:01:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsgetdate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/865855118368849920";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[5244743267]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql中修改表字段名/字段长度/字段类型详解</title>
		<link>https://xqmblog.wordpress.com/2017/05/26/mysql_altertable/</link>
		<pubDate>Fri, 26 May 2017 05:49:09 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=438</guid>
		<description></description>
		<content:encoded><![CDATA[在mysql中我们对数据表字段的修改命令只要使用alter就可以了

1.增加一个字段

<code>alter table user add COLUMN new1 VARCHAR(20) DEFAULT NULL;</code> //增加一个字段，默认为空
<code>alter table user add COLUMN new2 VARCHAR(20) NOT NULL;</code> 　　 //增加一个字段，默认不能为空

2.删除一个字段

<code>alter table user DROP COLUMN new2;</code> 　　　　　　　　　　　　　　 //删除一个字段

3.修改一个字段

<code>alter table user MODIFY new1 VARCHAR(10);</code> 　　　　　　　　　　 //修改一个字段的类型
<code>alter table user CHANGE new1 new4 int;</code>　　　　　　　　　　　　　 //修改一个字段的名称，此时一定要重新
//主键

<code>alter table tabelname add new_field_id int(5) unsigned default 0 not null auto_increment ,add primary key (new_field_id);</code>

//增加一个新列

<code>alter table t2 add d timestamp;</code>
<code>alter table infos add ex tinyint not null default ‘0′;</code>

//删除列

<code>alter table t2 drop column c;</code>

//重命名列

<code>alter table t1 change a b integer;</code>

//改变列的类型

<code>alter table t1 change b b bigint not null;</code>
<code>alter table infos change list list tinyint not null default ‘0′;</code>

//重命名表

<code>alter table t1 rename t2;</code>

加索引

<code>mysql&gt; alter table tablename change depno depno int(5) not null;</code>
<code>mysql&gt; alter table tablename add index 索引名 (字段名1[，字段名2 …]);</code>
<code>mysql&gt; alter table tablename add index emp_name (name);</code>

加主关键字的索引

<code>mysql&gt; alter table tablename add primary key(id);</code>

加唯一限制条件的索引

<code>mysql&gt; alter table tablename add unique emp_name2(cardnumber);</code>

删除某个索引

<code>mysql&gt;alter table tablename drop index emp_name;</code>

增加字段：

<code>mysql&gt; ALTER TABLE table_name ADD field_name field_type;</code>

修改原字段名称及类型：

<code>mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;</code>

删除字段：

<code>mysql&gt; ALTER TABLE table_name DROP field_name;</code>

mysql修改字段长度

alter table 表名 modify column 字段名 类型;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date>2017-05-26 13:49:09</wp:post_date>
		<wp:post_date_gmt>2017-05-26 05:49:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql_altertable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySql]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[5450331280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/867980927275749377";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHPMailer发邮件</title>
		<link>https://xqmblog.wordpress.com/2017/06/10/phpmailer/</link>
		<pubDate>Sat, 10 Jun 2017 10:45:21 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=445</guid>
		<description></description>
		<content:encoded><![CDATA[PHPMailer支持多种邮件发送方式

qq邮箱为例

进入qq邮箱点击设置，选中账户选项，在账户下设置POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务：

<img class="alignnone size-full wp-image-454" src="https://xqmblog.files.wordpress.com/2017/06/mail.png" alt="mail" width="1018" height="299" />

授权码 也是要用到的  自己去验证

引用了两个文件 <a href="https://github.com/PHPMailer/PHPMailer" target="_blank" rel="noopener">class.phpmailer.php、class.smtp.php</a>

写发邮件函数
<pre class="hljs php"><code class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendMail</span><span class="hljs-params">($body)</span> </span>{
    <span class="hljs-comment">// mail($toaddress, $subject, $mailcontent, $fromaddress);</span>
    date_default_timezone_set(<span class="hljs-string">'Asia/Shanghai'</span>);<span class="hljs-comment">//设定时区东八区</span>
    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">'class.phpmailer.php'</span>);
    <span class="hljs-keyword">include</span>(<span class="hljs-string">'class.smtp.php'</span>);
    $mail = <span class="hljs-keyword">new</span> PHPMailer;
    $mail-&gt;SMTPDebug = <span class="hljs-number">2</span>;                               <span class="hljs-comment">// Enable verbose debug output</span>
    $mail-&gt;isSMTP();                                      <span class="hljs-comment">// Set mailer to use SMTP</span>
    $mail-&gt;Host = <span class="hljs-string">'smtp.qq.com'</span>;  <span class="hljs-comment">// Specify main and backup SMTP servers</span>
    $mail-&gt;SMTPAuth = <span class="hljs-keyword">true</span>;                               <span class="hljs-comment">// Enable SMTP authentication</span>
    $mail-&gt;Username = <span class="hljs-string">'***'</span>;                 <span class="hljs-comment">// SMTP 账号（一般是qq号）</span>
    $mail-&gt;Password = <span class="hljs-string">'****'</span>;    <span class="hljs-comment">// SMTP 授权码 （这个是上面生成的授权码）</span>
    $mail-&gt;SMTPSecure = <span class="hljs-string">'ssl'</span>;                            <span class="hljs-comment">// Enable TLS encryption, `ssl` also accepted</span>
    $mail-&gt;Port = <span class="hljs-number">465</span>;  //端口号
    $mail-&gt;Host;                                  <span class="hljs-comment">// TCP port to connect to</span>
    $mail-&gt;setFrom(<span class="hljs-string">'***@qq.com'</span>, <span class="hljs-string">'Mailer'</span>); //发件人地址，称呼
    <span class="hljs-comment">// $mail-&gt;addAddress('***@qq.com', 'Joe User');     // Add a recipient</span>
    $mail-&gt;addAddress(<span class="hljs-string">'***@qq.com'</span>);               <span class="hljs-comment">// 收件人</span>
    //$mail-&gt;addReplyTo(<span class="hljs-string">'***@qq.com'</span>, <span class="hljs-string">'Information'</span>);
    <span class="hljs-comment">// $mail-&gt;addCC('***@qq.com');</span>
    <span class="hljs-comment">// $mail-&gt;addBCC('***@qq.com');</span>
    <span class="hljs-comment">// $mail-&gt;addAttachment('/var/tmp/file.tar.gz');         // Add attachments</span>
    <span class="hljs-comment">// $mail-&gt;addAttachment('/tmp/image.jpg');    //附件（注意路径）</span>
    $mail-&gt;isHTML(<span class="hljs-keyword">false</span>);                                  <span class="hljs-comment">// Set email format to HTML</span>
    $mail-&gt;Subject = <span class="hljs-string">'Here is the subject'</span>;//标题
    $mail-&gt;Body    = $body; //内容
    $mail-&gt;AltBody = <span class="hljs-string">'This is the body in plain text for non-HTML mail clients'</span>;
    <span class="hljs-keyword">if</span>(!$mail-&gt;send()) {
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Message could not be sent.'</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Mailer Error: '</span> . $mail-&gt;ErrorInfo;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">echo</span> ucwords(<span class="hljs-string">'Message has been sent'</span>);
    }
}
</code>
调用sendMail就可以了 
这个知识简单的实现了发送邮件
具体的自己灵活运用

</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2017-06-10 18:45:21</wp:post_date>
		<wp:post_date_gmt>2017-06-10 10:45:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>phpmailer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="phpmailer"><![CDATA[PHPMailer]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/873491291878948864";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[5967560139]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>生成随机字符串</title>
		<link>https://xqmblog.wordpress.com/2017/06/13/rand_key/</link>
		<pubDate>Tue, 13 Jun 2017 04:00:10 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=494</guid>
		<description></description>
		<content:encoded><![CDATA[经常会使用到生成随机字符串  封装了个方法

也可以用来生成不重复的唯一key
<pre><code>function rand_key($len){</code>
<code>    mt_srand((double)microtime()*10000);//optional for php 4.2.0 and up.</code>
<code>    $charid = strtoupper(md5(uniqid(rand(), true)));</code>
<code>    $uuid =substr($charid, 0, $len);</code>
<code>    return $uuid;</code>
<code>}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date>2017-06-13 12:00:10</wp:post_date>
		<wp:post_date_gmt>2017-06-13 04:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rand_key</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[6051482527]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/874476484563525632";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php整理常用时间戳和日期</title>
		<link>https://xqmblog.wordpress.com/2017/07/25/dateandtime/</link>
		<pubDate>Tue, 25 Jul 2017 07:20:17 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=499</guid>
		<description></description>
		<content:encoded><![CDATA[昨天0时时间戳
<code>$yesterday_zero = strtotime(date('Y-m-d')) - 3600 * 24;</code>
昨天此时时间戳
<code>$yesterday_now = strtotime('-1 day');</code>
本周一时间戳
<code>$week_this_monday = strtotime('last Monday');</code>
明天时间戳
<code>$tomorrow = strtotime("+1 day");</code>
上周一时间戳
<code>$week_last_monday = strtotime('last Monday') - 3600 * 24 * 7;</code>
上周日时间戳
<code>$week_last_sunday = strtotime('last Monday') - 3600 * 24;</code>
本月第一天时间戳
<code>$month_first = strtotime(date("Y") . "-" . date("m") . "-1");</code>
本月最后一天时间戳
<code>$month_last = strtotime(date("Y") . "-" . date("m") . "-" . date("t"));</code>
获取上个月第一天及最后一天
<code>echo date('Y-m-01', strtotime('-1 month')); </code>
<code>echo "&lt;br/&gt;"; </code>
<code>echo date('Y-m-t', strtotime('-1 month'));</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>499</wp:post_id>
		<wp:post_date>2017-07-25 15:20:17</wp:post_date>
		<wp:post_date_gmt>2017-07-25 07:20:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dateandtime</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[7464155948]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/889747128427401217";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>js刷新页面</title>
		<link>https://xqmblog.wordpress.com/2017/07/26/jsrefresh/</link>
		<pubDate>Wed, 26 Jul 2017 03:03:43 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=505</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Javascript刷新页面的几种方法：</strong>

<code>1）history.go(0)
2）location.reload()
3）location=location
4）location.assign(location)
5）document.execCommand('Refresh')
6）window.navigate(location)
7）location.replace(location)
8）document.URL=location.href</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>505</wp:post_id>
		<wp:post_date>2017-07-26 11:03:43</wp:post_date>
		<wp:post_date_gmt>2017-07-26 03:03:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsrefresh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[7494206443]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/890044952515936262";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL随机获取数据</title>
		<link>https://xqmblog.wordpress.com/?p=511</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=511</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<code>SELECT * FROM `table` ORDER BY RAND() LIMIT 5;</code>

就可以随机查询5条数据。但是这样效率非常低，如果几万或百万时就很明显。

<code>SELECT *</code>
<code>FROM `table` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `table`)) AS id) AS t2</code>
<code>WHERE t1.id &gt;= t2.id</code>
<code>ORDER BY t1.id ASC LIMIT 5;</code>

优化过后就]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2017-07-26 16:34:10</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysqlgetrand</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySql]]></category>
	</item>
	<item>
		<title>360个人图书馆 轻松解除网页防复制</title>
		<link>https://xqmblog.wordpress.com/2017/07/27/360doccopy/</link>
		<pubDate>Thu, 27 Jul 2017 07:07:37 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=524</guid>
		<description></description>
		<content:encoded><![CDATA[360个人图书馆会自动采集一些比较好的文章，我的博客文章也被采集过几篇，用过360个人图书馆的人都知道要复制别人的文章需要先收藏到自己的图书馆才可以复制，没有账号右键复制它会直接弹出一个提示登录框。不过如果你不经常使用360个人图书馆，你也会懒得专门去注册一个帐号吧？

chrome浏览器按F12（打开谷歌浏览器的开发者工具）
点击Console
然后按F5 刷新下网页，（根据测试必须刷新下网页等下插入代码才能生效）

<img class="alignnone size-full wp-image-533" src="https://xqmblog.files.wordpress.com/2017/07/360copy.png" alt="360copy" width="1425" height="672" />

&nbsp;

<code>document<span class="sy0">.</span>oncontextmenu<span class="sy0">=</span>document<span class="sy0">.</span>onselectstart<span class="sy0">=</span>document<span class="sy0">.</span>body<span class="sy0">.</span>onselectstart<span class="sy0">=</span>document<span class="sy0">.</span>oncopy<span class="sy0">=</span>document<span class="sy0">.</span>body<span class="sy0">.</span>oncopy<span class="sy0">=</span><span class="st0">""</span></code>

然后按回车键，ok！不会弹出那令人蛋疼的提示了，可以复制了。

转：<a title="本文固定链接 https://laod.cn/black-technology/360doc-copy.html" href="https://laod.cn/black-technology/360doc-copy.html" rel="bookmark">360个人图书馆 轻松解除网页防复制 | 老D博客</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>524</wp:post_id>
		<wp:post_date>2017-07-27 15:07:37</wp:post_date>
		<wp:post_date_gmt>2017-07-27 07:07:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>360doccopy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bb%bc%e5%90%88"><![CDATA[综合]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/890468722749706240";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[7539841808]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CMD一键获取 所有连接过的WIFI密码</title>
		<link>https://xqmblog.wordpress.com/?p=535</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=535</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>535</wp:post_id>
		<wp:post_date>2017-07-27 15:22:32</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
	</item>
	<item>
		<title>JQuery中巧用Ajax的beforeSend方法</title>
		<link>https://xqmblog.wordpress.com/2017/08/17/ajaxbeforesend/</link>
		<pubDate>Thu, 17 Aug 2017 11:28:38 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=536</guid>
		<description></description>
		<content:encoded><![CDATA[jQuery是经常使用的一个开源js框架，其中的$.ajax请求中有一个<strong>beforeSend</strong>方法，用于在向服务器发送请求前执行一些动作。

<code>$.ajax({
beforeSend: function(){
// Handle the beforeSend event
},
complete: function(){
// Handle the complete event
}
// ......
});</code>

<strong>防止重复数据</strong>
在实际项目开发中，提交表单时常常由于网络或者其原因，用户点击提交按钮误认为自己没有操作成功，进而会重复提交按钮操作次数，如果页面前端代码没有做一些相应的处理，通常会导致多条同样的数据插入数据库，导致脏数据的增加。要避免这种现象，在$.ajax请求中的beforeSend方法中把提交按钮禁用掉，等到Ajax请求执行完毕，在恢复按钮的可用状态。

<code>// 提交表单数据到后台处理
$.ajax({
type: "post",
data: studentInfo,
contentType: "application/json",
url: "/Home/Submit",
beforeSend: function () {
// 禁用按钮防止重复提交
$("#submit").attr({ disabled: "disabled" });
},
success: function (data) {
if (data == "Success") {
//清空输入框
clearBox();
}
},
complete: function () {
$("#submit").removeAttr("disabled");
},
error: function (data) {
console.info("error: " + data.responseText);
}
});</code>

ajax请求服务器加载数据列表时提示loading(“加载中，请稍后...”)

<code>$.ajax({
type: "post",
contentType: "application/json",
url: "/Home/GetList",
beforeSend: function () {
$("loading").show();
},
success: function (data) {
if (data == "Success") {
// ...
}
},
complete: function () {
$("loading").hide();
},
error: function (data) {
console.info("error: " + data.responseText);
}
});</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date>2017-08-17 19:28:38</wp:post_date>
		<wp:post_date_gmt>2017-08-17 11:28:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ajaxbeforesend</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[8354134816]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/898144544151261186";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JQuery中html、append、appendTo、after、insertAfter、before、insertBefore、empty、remove系列方法的使用。</title>
		<link>https://xqmblog.wordpress.com/2017/08/17/jqhtmlappend/</link>
		<pubDate>Thu, 17 Aug 2017 11:33:15 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=544</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>html</strong>方法，给元素添加html代码或者清空html代码（参数为空字符串）；
<strong>append</strong>向元素的末尾添加html代码；
<strong>appendTo</strong>这个方法跟append方法的很像，只是要添加的html代码的目标有所不一样；
<strong>after</strong>向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入；
<strong>before</strong>向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插入；
<strong>insertAfter</strong>将JQuery封装好的元素插入到指定元素的后面，如果元素后面有元素了，那将后面的元素后移，然后将JQuery对象插入；
<strong>insertBefore</strong>将JQuery封装好的元素插入到指定元素的前面，如果元素前面有元素了，那将前面的元素前移，然后将JQuery对象插入；
<strong>empty</strong>清空元素内部的html代码，它只是清空内部的html代码，但是标记仍然留在DOM中；
<strong>remove</strong>从DOM中移除整个元素；]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date>2017-08-17 19:33:15</wp:post_date>
		<wp:post_date_gmt>2017-08-17 11:33:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jqhtmlappend</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[8354248902]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/898145712181063681";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>隐藏Nginx版本号</title>
		<link>https://xqmblog.wordpress.com/2017/08/24/hidenginxversion/</link>
		<pubDate>Thu, 24 Aug 2017 10:44:38 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=548</guid>
		<description></description>
		<content:encoded><![CDATA[隐藏Nginx版本号，Nginx的版本号主要在两个地方会有，

第一个是HTTP header，有个Server:nginx/1.x.x类似会暴露Web服务器所用软件名称以及版本号，这个也是大多数Web服务器最容易暴露版本号的地方，如下：

<code>[root@bkjz ~]# curl -I www.nginx.org
HTTP/1.1 200 OK
Server: nginx/0.8.44
Date: Tue, 13 Jul 2010 14:05:11 GMT
Content-Type: text/html
Content-Length: 8284
Last-Modified: Tue, 13 Jul 2010 12:00:13 GMT
Connection: keep-alive
Keep-Alive: timeout=15
Accept-Ranges: bytes</code>

第二个地方是Nginx出错页面，比如404页面没有找到等，这是如果用户没有指定页面的话，那么Nginx自己的页面会有版本号。

但是可以修改配置文件来打达我们的目的

1.打开Nginx主配置文件：nginx.conf，取消注释或添加配置语句。
<pre>http {
    # ...省略一些配置
　　sendfile on;
　　tcp_nopush on;
　　keepalive_timeout 60;
　　tcp_nodelay on;
    server_tokens off; 　　#默认是注释掉的

　　# ...省略一些配置
}</pre>
2.编辑php-fpm配置文件，如fastcgi.conf或fcgi.conf（这个配置文件名也可以自定义的，根据具体文件名修改）

找到：

<code>fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;</code>

改为：

<code>fastcgi_param SERVER_SOFTWARE nginx;</code>

3.重启

这样就完全对外隐藏了nginx版本号了，就是出现404、501等页面也不会显示nginx版本。

<code></code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>548</wp:post_id>
		<wp:post_date>2017-08-24 18:44:38</wp:post_date>
		<wp:post_date_gmt>2017-08-24 10:44:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hidenginxversion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[8586327320]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/900670194863001601";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>js获取图片名称、大小、类型、上次修改时间</title>
		<link>https://xqmblog.wordpress.com/2017/08/28/jsgetimginfo/</link>
		<pubDate>Mon, 28 Aug 2017 08:48:31 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=565</guid>
		<description></description>
		<content:encoded><![CDATA[input[type='file']上传图片时，获取图片的基本信息（名称、大小、类型和修改时间）

html代码：
<div class="line number10 index9 alt1"><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"upload-img"</code><code class="html plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="html spaces">    </code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"input"</code><code class="html plain">&gt;</code></div>
<div class="line number12 index11 alt1"><code class="html spaces">        </code><code class="html plain">&lt;</code><code class="html keyword">label</code><code class="html plain">&gt;上传图片:&lt;/</code><code class="html keyword">label</code><code class="html plain">&gt;</code></div>
<div class="line number13 index12 alt2"><code class="html spaces">        </code><code class="html plain">&lt;</code><code class="html keyword">input</code> <code class="html color1">type</code><code class="html plain">=</code><code class="html string">"file"</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"input-file"</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"input-file"</code><code class="html plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="html spaces">    </code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div class="line number15 index14 alt2"><code class="html spaces">    </code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"show-img"</code><code class="html plain">&gt;</code></div>
<div class="line number16 index15 alt1"><code class="html spaces">        </code><code class="html plain">&lt;</code><code class="html keyword">label</code><code class="html plain">&gt;图片预览:&lt;/</code><code class="html keyword">label</code><code class="html plain">&gt;</code></div>
<div class="line number17 index16 alt2"><code class="html spaces">        </code><code class="html plain">&lt;</code><code class="html keyword">img</code> <code class="html color1">src</code><code class="html plain">=</code><code class="html string">""</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"show-img"</code><code class="html plain">&gt;</code></div>
<div class="line number18 index17 alt1"><code class="html spaces">    </code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div class="line number19 index18 alt2"><code class="html spaces">    </code><code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">class</code><code class="html plain">=</code><code class="html string">"show-info"</code> <code class="html color1">id</code><code class="html plain">=</code><code class="html string">"show-info"</code><code class="html plain">&gt;</code></div>
<div class="line number20 index19 alt1"></div>
<div class="line number21 index20 alt2"><code class="html spaces">    </code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div class="line number22 index21 alt1"><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div></div>
js代码：
<pre><code>document.getElementById('input-file').addEventListener('change',function () {
    var files=this.files, //FileList，类数组，不是数组哦
        file=files[0],
        fileName=file.name,//文件名
        fileType=file.type,//文件类型
        fileSize=file.size,//文件大小
        modifiedDate=file.lastModifiedDate,//上次修改时间
        html='';
    getImageSize(file,function (imgWidth,imgHeight) {
        html='文件名称：'+fileName+'
            +'文件类型：'+fileType+'
            +'文件大小：'+fileSize+'
            +'上次修改时间：'+modifiedDate+'
            +'文件宽高：'+imgWidth+'----'+imgHeight;
        document.getElementById('show-info').innerHTML=html;
    });
});</code></pre>
<pre>//获取选择图片的宽高
        <code>function getImageSize(file,callback) {
            var render=new FileReader();
            render.onload=function (e) {
                var data=e.target.result;//读取的结果
                var image=new Image();
                image.onload=function () {
                    var width=image.width,
                        height=image.height;
                    callback(width,height);
                };
                image.src=data;
                //预览图片
                document.getElementById('show-img').src=data;
            };
            render.readAsDataURL(file);
        }
</code></pre>
&nbsp;

转：http://y.dobit.top/Detail/312.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>565</wp:post_id>
		<wp:post_date>2017-08-28 16:48:31</wp:post_date>
		<wp:post_date_gmt>2017-08-28 08:48:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsgetimginfo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[8708208626]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/902090522159980544";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://xqmblog.wordpress.com/?p=595</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=595</guid>
		<description></description>
		<content:encoded><![CDATA[<code></code>

/**
*　　　　　　　　┏┓　　　┏┓+ +
*　　　　　　　┏┛┻━━━┛┻┓ + +
*　　　　　　　┃　　　　　　　┃
*　　　　　　　┃　　　━　　　┃ ++ + + +
*　　　　　　 ████━████ ┃+
*　　　　　　　┃　　　　　　　┃ +
*　　　　　　　┃　　　┻　　　┃
*　　　　　　　┃　　　　　　　┃ + +
*　　　　　　　┗━┓　　　┏━┛
*　　　　　　　　　┃　　　┃
*　　　　　　　　　┃　　　┃ + + + +
*　　　　　　　　　┃　　　┃　　　　Code is far away from bug with the animal protecting
*　　　　　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug
*　　　　　　　　　┃　　　┃
*　　　　　　　　　┃　　　┃　　+
*　　　　　　　　　┃　 　　┗━━━┓ + +
*　　　　　　　　　┃ 　　　　　　　┣┓
*　　　　　　　　　┃ 　　　　　　　┏┛
*　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +
*　　　　　　　　　　┃┫┫　┃┫┫
*　　　　　　　　　　┗┻┛　┗┻┛+ + + +
*/

<code></code>

&nbsp;

<code></code>

//
// _oo0oo_
// o8888888o
// 88" . "88
// (| -_- |)
// 0\ = /0
// ___/`---'\___
// .' \\| |// '.
// / \\||| : |||// \
// / _||||| -:- |||||- \
// | | \\\ - /// | |
// | \_| ''\---/'' |_/ |
// \ .-\__ '-' ___/-. /
// ___'. .' /--.--\ `. .'___
// ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;' "".
// | | : `- \`.;`\ _ /`;.`/ - ` : | |
// \ \ `_. \_ __\ /__ _/ .-` / /
// =====`-.____`.___ \_____/___.-`___.-'=====
// `=---='
//
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// 佛祖保佑 永无BUG
//
//
//

<code></code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>595</wp:post_id>
		<wp:post_date>2017-10-25 18:17:13</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bb%bc%e5%90%88"><![CDATA[综合]]></category>
	</item>
	<item>
		<title>js中将字符串转换成json的三种方式</title>
		<link>https://xqmblog.wordpress.com/2017/11/08/str2json/</link>
		<pubDate>Wed, 08 Nov 2017 07:46:06 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=600</guid>
		<description></description>
		<content:encoded><![CDATA[将字符串转换成json对象，IE不支持通过JSON.parse将字符串转换成JSON对象的方法。

让人不由得认为IE的基本核心是无法使用JSON.parse的所以只能退而求其次采用老版本的方法

1、<strong>eval方式解析</strong>，恐怕这是最早的解析方式了。如下：

<code>function strToJson(str){
var json = eval('(' + str + ')');
return json;
} </code>

2、<strong>new Function形式</strong>，比较怪异哦。如下

<code>function strToJson(str){
var json = (new Function("return " + str))();
return json;
} </code>

3、<strong>使用全局的JSON对象</strong>，如下：

<code>function strToJson(str){
return JSON.parse(str);
} </code>

&nbsp;

&nbsp;

&nbsp;

转：http://www.jb51.net/article/25987.htm]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>600</wp:post_id>
		<wp:post_date>2017-11-08 15:46:06</wp:post_date>
		<wp:post_date_gmt>2017-11-08 07:46:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>str2json</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11209525640]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/928166739468275712";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quick_sort</title>
		<link>https://xqmblog.wordpress.com/2017/02/24/php_sort/quick_sort/</link>
		<pubDate>Fri, 24 Feb 2017 03:41:40 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/02/quick_sort.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2017-02-24 11:41:40</wp:post_date>
		<wp:post_date_gmt>2017-02-24 03:41:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>quick_sort</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>188</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/02/quick_sort.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/02/quick_sort.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:220;s:6:"height";i:168;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/02/quick_sort.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:294615;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bubblesort</title>
		<link>https://xqmblog.wordpress.com/2017/02/24/php_sort/bubblesort/</link>
		<pubDate>Fri, 24 Feb 2017 03:43:03 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/02/bubblesort.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2017-02-24 11:43:03</wp:post_date>
		<wp:post_date_gmt>2017-02-24 03:43:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>bubblesort</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>188</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/02/bubblesort.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/02/bubblesort.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:300;s:6:"height";i:180;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/02/bubblesort.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:154867;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wd</title>
		<link>https://xqmblog.wordpress.com/2017/03/01/nb_pwd/wd/</link>
		<pubDate>Wed, 01 Mar 2017 05:47:02 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/03/wd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2017-03-01 13:47:02</wp:post_date>
		<wp:post_date_gmt>2017-03-01 05:47:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>wd</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>236</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/03/wd.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/wd.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:595;s:6:"height";i:373;s:4:"file";s:79:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/wd.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:34907;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pc</title>
		<link>https://xqmblog.wordpress.com/2017/03/09/%e7%a7%bb%e5%8a%a8%e7%ab%99%e9%80%82%e9%85%8drelalternate-pc%e9%a1%b5%e5%92%8ch5%e9%a1%b5%e9%80%82%e9%85%8d%e6%a0%87%e6%b3%a8/pc/</link>
		<pubDate>Thu, 09 Mar 2017 02:32:11 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/03/pc.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2017-03-09 10:32:11</wp:post_date>
		<wp:post_date_gmt>2017-03-09 02:32:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>pc</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>254</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/03/pc.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/pc.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:755;s:6:"height";i:305;s:4:"file";s:79:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/pc.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:46451;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mobile</title>
		<link>https://xqmblog.wordpress.com/2017/03/09/%e7%a7%bb%e5%8a%a8%e7%ab%99%e9%80%82%e9%85%8drelalternate-pc%e9%a1%b5%e5%92%8ch5%e9%a1%b5%e9%80%82%e9%85%8d%e6%a0%87%e6%b3%a8/mobile/</link>
		<pubDate>Thu, 09 Mar 2017 02:32:32 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/03/mobile.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2017-03-09 10:32:32</wp:post_date>
		<wp:post_date_gmt>2017-03-09 02:32:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mobile</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>254</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/03/mobile.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/mobile.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:767;s:6:"height";i:367;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/mobile.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:55417;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>share</title>
		<link>https://xqmblog.wordpress.com/2017/03/29/jssharebutton/share/</link>
		<pubDate>Wed, 29 Mar 2017 02:23:35 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/03/share.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2017-03-29 10:23:35</wp:post_date>
		<wp:post_date_gmt>2017-03-29 02:23:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>share</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>340</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/03/share.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:203;s:6:"height";i:53;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/share.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2607;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/share.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shareCode</title>
		<link>https://xqmblog.wordpress.com/2017/03/29/jssharebutton/sharecode/</link>
		<pubDate>Wed, 29 Mar 2017 02:43:43 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/03/sharecode.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date>2017-03-29 10:43:43</wp:post_date>
		<wp:post_date_gmt>2017-03-29 02:43:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sharecode</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>340</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/03/sharecode.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:938;s:6:"height";i:600;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/sharecode.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:34190;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/03/sharecode.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mail</title>
		<link>https://xqmblog.wordpress.com/2017/06/10/phpmailer/mail/</link>
		<pubDate>Sat, 10 Jun 2017 10:22:19 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/06/mail.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2017-06-10 18:22:19</wp:post_date>
		<wp:post_date_gmt>2017-06-10 10:22:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mail</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>445</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/06/mail.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/06/mail.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1018;s:6:"height";i:299;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/06/mail.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:219734;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>360copy</title>
		<link>https://xqmblog.wordpress.com/2017/07/27/360doccopy/360copy/</link>
		<pubDate>Thu, 27 Jul 2017 07:07:01 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">http://xqmblog.files.wordpress.com/2017/07/360copy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>533</wp:post_id>
		<wp:post_date>2017-07-27 15:07:01</wp:post_date>
		<wp:post_date_gmt>2017-07-27 07:07:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>360copy</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>524</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://xqmblog.files.wordpress.com/2017/07/360copy.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/07/360copy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1425;s:6:"height";i:672;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/880/122177904/files/2017/07/360copy.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:76826;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>回车键搜索</title>
		<link>https://xqmblog.wordpress.com/2018/01/12/jq_keycodesearch/</link>
		<pubDate>Fri, 12 Jan 2018 11:23:39 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=614</guid>
		<description></description>
		<content:encoded><![CDATA[一般搜索的习惯是输入关键字后就敲个回车键搜索，刚好做个CMS的时候有个搜索功能需要输入关键，回车就可以搜索。

可以用JQ实现这个功能
<pre>//这个是PC端的
$(".keyword").keydown(function (e) {
    if (e.keyCode == 13) {
        alert('回车搜索');
    }
});

//移动端的要想手机输入法的显示“搜索”或者“前往”，就需要修改搜索的input标签的属性
type="search"
&lt;input type="search" class="keyword"&gt;
$(".keyword").bind("search", function() {
     alert('回车搜索');
})

用手机打开，就会发现输入法的上的搜索就出来了</pre>
<code></code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date>2018-01-12 19:23:39</wp:post_date>
		<wp:post_date_gmt>2018-01-12 11:23:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jq_keycodesearch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13508442401]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/951776704388915201";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>修改页面鼠标指针</title>
		<link>https://xqmblog.wordpress.com/2018/01/12/css_cursor/</link>
		<pubDate>Fri, 12 Jan 2018 12:03:28 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=616</guid>
		<description></description>
		<content:encoded><![CDATA[去逛博客的时候发现的发现，鼠标的指针就变了，变得很个性

于是学习了一下，很简单，只要添加两个样式就可以了

<code></code>
<pre>body {
   cursor: url(鼠标指针的图片链接),auto;
}
a:hover {
   cursor: url(鼠标指针的图片链接), auto;
}</pre>
<code></code>

这时候就可以看到你魔性的鼠标指针了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>616</wp:post_id>
		<wp:post_date>2018-01-12 20:03:28</wp:post_date>
		<wp:post_date_gmt>2018-01-12 12:03:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css_cursor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[html]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13509848723]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/951786720546111489";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>简单保存下载 Windows 10 随机聚焦锁屏壁纸</title>
		<link>https://xqmblog.wordpress.com/2018/01/20/win10bg/</link>
		<pubDate>Sat, 20 Jan 2018 06:49:37 +0000</pubDate>
		<dc:creator>xqmblog</dc:creator>
		<guid isPermaLink="false">https://xqmblog.wordpress.com/?p=618</guid>
		<description></description>
		<content:encoded><![CDATA[在 Windows 10 上新增了一项功能 Windows 聚焦 (Windows Spotlight)，它会自动随机下载并更换锁屏界面的壁纸 (Lockscreen)，让你每次打开电脑都有不一样的视觉享受。

这些聚焦锁屏壁纸也是会不断更新的，如果你遇到了非常喜欢的壁纸，先保存起来，但是又不知道在哪。

按下键盘的「Win+R」，调出“运行”窗口，然后输入下面的路径并点确定：

<code>%localappdata%\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets</code>

这时便会打开了 Win10 锁屏壁纸的隐藏文件夹，你会看到很多未知的文件，这些其实就是锁屏壁纸，但我们需要进一步处理。全选并复制这些文件到另外一个文件夹去，比如桌面或者其他盘（切勿修改原文件夹里的文件，会影响 Windows 聚焦功能）。

打开刚才复制文件夹所在的位置，按住键盘的 Shift 键同时右键点击该文件夹，然后选择「在此处打开命令行窗口」的选项启动命令行。

输入下边的命令 (注意保留空格)，并回车执行。这句命令是用来对文件进行批量重命名的。请务必注意此时命令行前面的路径是你正准备要操作的文件夹，如果是其他路径的话，该路径下的文件就全部被改名了！

<code>ren *.* *.jpg</code>

重命名也可以手动重命名，不过这个有的麻烦，如果安装 好压 ，就可以用好压来批量重命名文件了，全选文件（ctrl+a）然后右键鼠标，找到其 他压缩命令 --&gt; 批量文件改名，修改就可以了。

这时打开 复制的文件夹就可以看到那些未知的文件都已经变成图片了！不过，其中也会夹杂一些对我们没用的缓存文件，我们只管挑选其中的壁纸出来即可。这些锁屏壁纸中有横屏也有竖屏的，竖屏可以用于手机或平板，分辨率为 1920x1080 以及 1080x1920 全高清。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>618</wp:post_id>
		<wp:post_date>2018-01-20 14:49:37</wp:post_date>
		<wp:post_date_gmt>2018-01-20 06:49:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>win10bg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bb%bc%e5%90%88"><![CDATA[综合]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1516430980]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13817731289]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:16376178;s:55:"https://twitter.com/opiehello/status/954606844256931840";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_16574434</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_16376178</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[opiehello]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
